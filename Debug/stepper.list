
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff4  08007ff4  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ffc  08007ffc  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000146c  20000160  08008164  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  08008164  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e188  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0c  00000000  00000000  0002e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00030d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00031898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182d8  00000000  00000000  000322c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1f6  00000000  00000000  0004a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086764  00000000  00000000  0005978e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003118  00000000  00000000  000dff44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ea8 	.word	0x08007ea8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08007ea8 	.word	0x08007ea8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc89 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f965 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f9cf 	bl	8000944 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005a6:	f006 faa5 	bl	8006af4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CDC_Transmit_FS((uint8_t*)"Configured",15);
 80005aa:	210f      	movs	r1, #15
 80005ac:	489c      	ldr	r0, [pc, #624]	; (8000820 <main+0x28c>)
 80005ae:	f006 fb75 	bl	8006c9c <CDC_Transmit_FS>
  while (1)
  {

	  //HAL_Delay(200); //delay 100ms

	  if (buffer[strlen(buffer)-2] == '/') { snprintf(buff, sizeof(buff), "%d\r\n\0",strlen(buffer));
 80005b2:	489c      	ldr	r0, [pc, #624]	; (8000824 <main+0x290>)
 80005b4:	f7ff fe14 	bl	80001e0 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	3b02      	subs	r3, #2
 80005bc:	4a99      	ldr	r2, [pc, #612]	; (8000824 <main+0x290>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	2b2f      	cmp	r3, #47	; 0x2f
 80005c2:	d110      	bne.n	80005e6 <main+0x52>
 80005c4:	4897      	ldr	r0, [pc, #604]	; (8000824 <main+0x290>)
 80005c6:	f7ff fe0b 	bl	80001e0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a96      	ldr	r2, [pc, #600]	; (8000828 <main+0x294>)
 80005ce:	2110      	movs	r1, #16
 80005d0:	4896      	ldr	r0, [pc, #600]	; (800082c <main+0x298>)
 80005d2:	f006 fff5 	bl	80075c0 <sniprintf>
		  	  	  	  	  	  CDC_Transmit_FS(buff, sizeof(buff));   //receiving four bytes with ending character
 80005d6:	2110      	movs	r1, #16
 80005d8:	4894      	ldr	r0, [pc, #592]	; (800082c <main+0x298>)
 80005da:	f006 fb5f 	bl	8006c9c <CDC_Transmit_FS>
	  	  	  	  	  	  	  	  	  	 HAL_Delay(1000);}
 80005de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e2:	f000 fcd7 	bl	8000f94 <HAL_Delay>





      if (buffer[0] == '1') {choise=1;}
 80005e6:	4b8f      	ldr	r3, [pc, #572]	; (8000824 <main+0x290>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b31      	cmp	r3, #49	; 0x31
 80005ec:	d102      	bne.n	80005f4 <main+0x60>
 80005ee:	4b90      	ldr	r3, [pc, #576]	; (8000830 <main+0x29c>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
      if (buffer[0] == '2') {choise=2;}
 80005f4:	4b8b      	ldr	r3, [pc, #556]	; (8000824 <main+0x290>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b32      	cmp	r3, #50	; 0x32
 80005fa:	d102      	bne.n	8000602 <main+0x6e>
 80005fc:	4b8c      	ldr	r3, [pc, #560]	; (8000830 <main+0x29c>)
 80005fe:	2202      	movs	r2, #2
 8000600:	601a      	str	r2, [r3, #0]
      if (buffer[0] == '3') {choise=3;}
 8000602:	4b88      	ldr	r3, [pc, #544]	; (8000824 <main+0x290>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b33      	cmp	r3, #51	; 0x33
 8000608:	d102      	bne.n	8000610 <main+0x7c>
 800060a:	4b89      	ldr	r3, [pc, #548]	; (8000830 <main+0x29c>)
 800060c:	2203      	movs	r2, #3
 800060e:	601a      	str	r2, [r3, #0]
      if (buffer[0] == '4') {choise=4;}
 8000610:	4b84      	ldr	r3, [pc, #528]	; (8000824 <main+0x290>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b34      	cmp	r3, #52	; 0x34
 8000616:	d102      	bne.n	800061e <main+0x8a>
 8000618:	4b85      	ldr	r3, [pc, #532]	; (8000830 <main+0x29c>)
 800061a:	2204      	movs	r2, #4
 800061c:	601a      	str	r2, [r3, #0]
      if (buffer[0] == '9') {choise=9;}
 800061e:	4b81      	ldr	r3, [pc, #516]	; (8000824 <main+0x290>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b39      	cmp	r3, #57	; 0x39
 8000624:	d102      	bne.n	800062c <main+0x98>
 8000626:	4b82      	ldr	r3, [pc, #520]	; (8000830 <main+0x29c>)
 8000628:	2209      	movs	r2, #9
 800062a:	601a      	str	r2, [r3, #0]

      switch (choise){
 800062c:	4b80      	ldr	r3, [pc, #512]	; (8000830 <main+0x29c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	2b08      	cmp	r3, #8
 8000634:	d8bd      	bhi.n	80005b2 <main+0x1e>
 8000636:	a201      	add	r2, pc, #4	; (adr r2, 800063c <main+0xa8>)
 8000638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063c:	08000661 	.word	0x08000661
 8000640:	080006c3 	.word	0x080006c3
 8000644:	0800071b 	.word	0x0800071b
 8000648:	08000773 	.word	0x08000773
 800064c:	080005b3 	.word	0x080005b3
 8000650:	080005b3 	.word	0x080005b3
 8000654:	080005b3 	.word	0x080005b3
 8000658:	080005b3 	.word	0x080005b3
 800065c:	080007cb 	.word	0x080007cb
	  	  	  case 1:
	  	      stepdelay=10;
 8000660:	4b74      	ldr	r3, [pc, #464]	; (8000834 <main+0x2a0>)
 8000662:	220a      	movs	r2, #10
 8000664:	601a      	str	r2, [r3, #0]
	  	      CDC_Transmit_FS((uint8_t*)"Speed test 8\n\r",16);
 8000666:	2110      	movs	r1, #16
 8000668:	4873      	ldr	r0, [pc, #460]	; (8000838 <main+0x2a4>)
 800066a:	f006 fb17 	bl	8006c9c <CDC_Transmit_FS>
	  	  		 for(int k=0; k<100; k++) {
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e016      	b.n	80006a2 <main+0x10e>
	  	  								{
	  	  									stepper_half_drive(step);
	  	  					  	  	  	  	//stepper_full_drive(step,stepdelay);

	  	  								}*/
	  	  			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //Toggle the state of pin PC9
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	4870      	ldr	r0, [pc, #448]	; (800083c <main+0x2a8>)
 800067a:	f000 ff5e 	bl	800153a <HAL_GPIO_TogglePin>
	  	  			  stepper_half_drive();
 800067e:	f000 f9c9 	bl	8000a14 <stepper_half_drive>
	  	  			  thisStep ++;
 8000682:	4b6f      	ldr	r3, [pc, #444]	; (8000840 <main+0x2ac>)
 8000684:	f993 3000 	ldrsb.w	r3, [r3]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	3301      	adds	r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	b25a      	sxtb	r2, r3
 8000690:	4b6b      	ldr	r3, [pc, #428]	; (8000840 <main+0x2ac>)
 8000692:	701a      	strb	r2, [r3, #0]
	  	  			  HAL_Delay(5000);
 8000694:	f241 3088 	movw	r0, #5000	; 0x1388
 8000698:	f000 fc7c 	bl	8000f94 <HAL_Delay>
	  	  		 for(int k=0; k<100; k++) {
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	3301      	adds	r3, #1
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	2b63      	cmp	r3, #99	; 0x63
 80006a6:	dde5      	ble.n	8000674 <main+0xe0>

	  	  			  }

	  	  	      CDC_Transmit_FS((uint8_t*)"Ready case 1\n\r",16);
 80006a8:	2110      	movs	r1, #16
 80006aa:	4866      	ldr	r0, [pc, #408]	; (8000844 <main+0x2b0>)
 80006ac:	f006 faf6 	bl	8006c9c <CDC_Transmit_FS>
	  	  	      memset (buffer, '\0', 64);
 80006b0:	2240      	movs	r2, #64	; 0x40
 80006b2:	2100      	movs	r1, #0
 80006b4:	485b      	ldr	r0, [pc, #364]	; (8000824 <main+0x290>)
 80006b6:	f006 ff7b 	bl	80075b0 <memset>
	  	  	      //thisStep=0;
	  	  	      choise=0;
 80006ba:	4b5d      	ldr	r3, [pc, #372]	; (8000830 <main+0x29c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
				  break;
 80006c0:	e0ac      	b.n	800081c <main+0x288>

			  case 2:
			  stepdelay=20;
 80006c2:	4b5c      	ldr	r3, [pc, #368]	; (8000834 <main+0x2a0>)
 80006c4:	2214      	movs	r2, #20
 80006c6:	601a      	str	r2, [r3, #0]
			  CDC_Transmit_FS((uint8_t*)"Speed test 16\n\r",17);
 80006c8:	2111      	movs	r1, #17
 80006ca:	485f      	ldr	r0, [pc, #380]	; (8000848 <main+0x2b4>)
 80006cc:	f006 fae6 	bl	8006c9c <CDC_Transmit_FS>
				 for(int k=0; k<50; k++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	e011      	b.n	80006fa <main+0x166>

						  for (int step=0; step<4; step++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	e008      	b.n	80006ee <main+0x15a>
										{
											//stepper_half_drive(step);
											stepper_full_drive(step,stepdelay);
 80006dc:	4b55      	ldr	r3, [pc, #340]	; (8000834 <main+0x2a0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	6978      	ldr	r0, [r7, #20]
 80006e4:	f000 fa62 	bl	8000bac <stepper_full_drive>
						  for (int step=0; step<4; step++)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	ddf3      	ble.n	80006dc <main+0x148>
				 for(int k=0; k<50; k++) {
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	3301      	adds	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	2b31      	cmp	r3, #49	; 0x31
 80006fe:	ddea      	ble.n	80006d6 <main+0x142>

										}
					  }

				  CDC_Transmit_FS((uint8_t*)"Ready case 2\n\r",16);
 8000700:	2110      	movs	r1, #16
 8000702:	4852      	ldr	r0, [pc, #328]	; (800084c <main+0x2b8>)
 8000704:	f006 faca 	bl	8006c9c <CDC_Transmit_FS>
				  memset (buffer, '\0', 64);
 8000708:	2240      	movs	r2, #64	; 0x40
 800070a:	2100      	movs	r1, #0
 800070c:	4845      	ldr	r0, [pc, #276]	; (8000824 <main+0x290>)
 800070e:	f006 ff4f 	bl	80075b0 <memset>
				  choise=0;
 8000712:	4b47      	ldr	r3, [pc, #284]	; (8000830 <main+0x29c>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
				  break;
 8000718:	e080      	b.n	800081c <main+0x288>

				  case 3:
				  stepdelay=31;
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <main+0x2a0>)
 800071c:	221f      	movs	r2, #31
 800071e:	601a      	str	r2, [r3, #0]
				  CDC_Transmit_FS((uint8_t*)"Speed test 25\n\r",17);
 8000720:	2111      	movs	r1, #17
 8000722:	484b      	ldr	r0, [pc, #300]	; (8000850 <main+0x2bc>)
 8000724:	f006 faba 	bl	8006c9c <CDC_Transmit_FS>
					 for(int k=0; k<50; k++) {
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	e011      	b.n	8000752 <main+0x1be>

							  for (int step=0; step<4; step++)
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e008      	b.n	8000746 <main+0x1b2>
											{
												//stepper_half_drive(step);
												stepper_full_drive(step,stepdelay);
 8000734:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <main+0x2a0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 fa36 	bl	8000bac <stepper_full_drive>
							  for (int step=0; step<4; step++)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b03      	cmp	r3, #3
 800074a:	ddf3      	ble.n	8000734 <main+0x1a0>
					 for(int k=0; k<50; k++) {
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	3301      	adds	r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	2b31      	cmp	r3, #49	; 0x31
 8000756:	ddea      	ble.n	800072e <main+0x19a>

											}
						  }

					  CDC_Transmit_FS((uint8_t*)"Ready case 3\n\r",16);
 8000758:	2110      	movs	r1, #16
 800075a:	483e      	ldr	r0, [pc, #248]	; (8000854 <main+0x2c0>)
 800075c:	f006 fa9e 	bl	8006c9c <CDC_Transmit_FS>
					  memset (buffer, '\0', 64);
 8000760:	2240      	movs	r2, #64	; 0x40
 8000762:	2100      	movs	r1, #0
 8000764:	482f      	ldr	r0, [pc, #188]	; (8000824 <main+0x290>)
 8000766:	f006 ff23 	bl	80075b0 <memset>
					  choise=0;
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <main+0x29c>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
					  break;
 8000770:	e054      	b.n	800081c <main+0x288>

					  case 4:
					  stepdelay=41;
 8000772:	4b30      	ldr	r3, [pc, #192]	; (8000834 <main+0x2a0>)
 8000774:	2229      	movs	r2, #41	; 0x29
 8000776:	601a      	str	r2, [r3, #0]
					  CDC_Transmit_FS((uint8_t*)"Speed test 33\n\r",17);
 8000778:	2111      	movs	r1, #17
 800077a:	4837      	ldr	r0, [pc, #220]	; (8000858 <main+0x2c4>)
 800077c:	f006 fa8e 	bl	8006c9c <CDC_Transmit_FS>
						 for(int k=0; k<50; k++) {
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	e011      	b.n	80007aa <main+0x216>

								  for (int step=0; step<4; step++)
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	e008      	b.n	800079e <main+0x20a>
												{
													//stepper_half_drive(step);
													stepper_full_drive(step,stepdelay);
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <main+0x2a0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 fa0a 	bl	8000bac <stepper_full_drive>
								  for (int step=0; step<4; step++)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	ddf3      	ble.n	800078c <main+0x1f8>
						 for(int k=0; k<50; k++) {
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	3301      	adds	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	2b31      	cmp	r3, #49	; 0x31
 80007ae:	ddea      	ble.n	8000786 <main+0x1f2>

												}
							  }

						  CDC_Transmit_FS((uint8_t*)"Ready case 4\n\r",16);
 80007b0:	2110      	movs	r1, #16
 80007b2:	482a      	ldr	r0, [pc, #168]	; (800085c <main+0x2c8>)
 80007b4:	f006 fa72 	bl	8006c9c <CDC_Transmit_FS>
						  memset (buffer, '\0', 64);
 80007b8:	2240      	movs	r2, #64	; 0x40
 80007ba:	2100      	movs	r1, #0
 80007bc:	4819      	ldr	r0, [pc, #100]	; (8000824 <main+0x290>)
 80007be:	f006 fef7 	bl	80075b0 <memset>
						  choise=0;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <main+0x29c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
						  break;
 80007c8:	e028      	b.n	800081c <main+0x288>


					  case 9:

					  					  CDC_Transmit_FS((uint8_t*)"HOLDING\n\r",11);
 80007ca:	210b      	movs	r1, #11
 80007cc:	4824      	ldr	r0, [pc, #144]	; (8000860 <main+0x2cc>)
 80007ce:	f006 fa65 	bl	8006c9c <CDC_Transmit_FS>
					  						//stepper_hold();

					  					 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);   // IN1
 80007d2:	2200      	movs	r2, #0
 80007d4:	2101      	movs	r1, #1
 80007d6:	4823      	ldr	r0, [pc, #140]	; (8000864 <main+0x2d0>)
 80007d8:	f000 fe96 	bl	8001508 <HAL_GPIO_WritePin>
										  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);   // IN2
 80007dc:	2200      	movs	r2, #0
 80007de:	2102      	movs	r1, #2
 80007e0:	4820      	ldr	r0, [pc, #128]	; (8000864 <main+0x2d0>)
 80007e2:	f000 fe91 	bl	8001508 <HAL_GPIO_WritePin>
										  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);   // IN3
 80007e6:	2200      	movs	r2, #0
 80007e8:	2104      	movs	r1, #4
 80007ea:	481e      	ldr	r0, [pc, #120]	; (8000864 <main+0x2d0>)
 80007ec:	f000 fe8c 	bl	8001508 <HAL_GPIO_WritePin>
										  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2108      	movs	r1, #8
 80007f4:	481b      	ldr	r0, [pc, #108]	; (8000864 <main+0x2d0>)
 80007f6:	f000 fe87 	bl	8001508 <HAL_GPIO_WritePin>


					  						HAL_Delay(2000);
 80007fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007fe:	f000 fbc9 	bl	8000f94 <HAL_Delay>
					  						  CDC_Transmit_FS((uint8_t*)"FREE\n\r",8);
 8000802:	2108      	movs	r1, #8
 8000804:	4818      	ldr	r0, [pc, #96]	; (8000868 <main+0x2d4>)
 8000806:	f006 fa49 	bl	8006c9c <CDC_Transmit_FS>
					  						  memset (buffer, '\0', 64);
 800080a:	2240      	movs	r2, #64	; 0x40
 800080c:	2100      	movs	r1, #0
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <main+0x290>)
 8000810:	f006 fece 	bl	80075b0 <memset>
					  						  choise=0;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <main+0x29c>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
					  						  break;
 800081a:	bf00      	nop
	  if (buffer[strlen(buffer)-2] == '/') { snprintf(buff, sizeof(buff), "%d\r\n\0",strlen(buffer));
 800081c:	e6c9      	b.n	80005b2 <main+0x1e>
 800081e:	bf00      	nop
 8000820:	08007ec0 	.word	0x08007ec0
 8000824:	2000017c 	.word	0x2000017c
 8000828:	08007ecc 	.word	0x08007ecc
 800082c:	200001c8 	.word	0x200001c8
 8000830:	200001bc 	.word	0x200001bc
 8000834:	200001c0 	.word	0x200001c0
 8000838:	08007ed4 	.word	0x08007ed4
 800083c:	40020800 	.word	0x40020800
 8000840:	200001c4 	.word	0x200001c4
 8000844:	08007ee4 	.word	0x08007ee4
 8000848:	08007ef4 	.word	0x08007ef4
 800084c:	08007f04 	.word	0x08007f04
 8000850:	08007f14 	.word	0x08007f14
 8000854:	08007f24 	.word	0x08007f24
 8000858:	08007f34 	.word	0x08007f34
 800085c:	08007f44 	.word	0x08007f44
 8000860:	08007f54 	.word	0x08007f54
 8000864:	40020000 	.word	0x40020000
 8000868:	08007f60 	.word	0x08007f60

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	; 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	2230      	movs	r2, #48	; 0x30
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f006 fe98 	bl	80075b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <SystemClock_Config+0xd0>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a28      	ldr	r2, [pc, #160]	; (800093c <SystemClock_Config+0xd0>)
 800089a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <SystemClock_Config+0xd0>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <SystemClock_Config+0xd4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <SystemClock_Config+0xd4>)
 80008ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <SystemClock_Config+0xd4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008e0:	2319      	movs	r3, #25
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008e4:	23c0      	movs	r3, #192	; 0xc0
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e8:	2304      	movs	r3, #4
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 f8b7 	bl	8002a68 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000900:	f000 fa02 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fb18 	bl	8002f58 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800092e:	f000 f9eb 	bl	8000d08 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <MX_GPIO_Init+0xc4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <MX_GPIO_Init+0xc4>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_GPIO_Init+0xc4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_GPIO_Init+0xc4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <MX_GPIO_Init+0xc4>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_GPIO_Init+0xc4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_GPIO_Init+0xc4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <MX_GPIO_Init+0xc4>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_GPIO_Init+0xc4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_GPIO_Init+0xc8>)
 80009b6:	f000 fda7 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	210f      	movs	r1, #15
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <MX_GPIO_Init+0xcc>)
 80009c0:	f000 fda2 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0xc8>)
 80009de:	f000 fc0f 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009e2:	230f      	movs	r3, #15
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_GPIO_Init+0xcc>)
 80009fa:	f000 fc01 	bl	8001200 <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020000 	.word	0x40020000

08000a14 <stepper_half_drive>:

/* USER CODE BEGIN 4 */

void stepper_half_drive ()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	switch (thisStep & 0b111){
 8000a18:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <stepper_half_drive+0x190>)
 8000a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	f200 80bb 	bhi.w	8000ba0 <stepper_half_drive+0x18c>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <stepper_half_drive+0x1c>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a51 	.word	0x08000a51
 8000a34:	08000a7b 	.word	0x08000a7b
 8000a38:	08000aa5 	.word	0x08000aa5
 8000a3c:	08000acf 	.word	0x08000acf
 8000a40:	08000af9 	.word	0x08000af9
 8000a44:	08000b23 	.word	0x08000b23
 8000a48:	08000b4d 	.word	0x08000b4d
 8000a4c:	08000b77 	.word	0x08000b77
	case 0:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);   // IN1
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	4854      	ldr	r0, [pc, #336]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a56:	f000 fd57 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);   // IN2
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4852      	ldr	r0, [pc, #328]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a60:	f000 fd52 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);   // IN3
 8000a64:	2200      	movs	r2, #0
 8000a66:	2104      	movs	r1, #4
 8000a68:	484f      	ldr	r0, [pc, #316]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a6a:	f000 fd4d 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);   // IN4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2108      	movs	r1, #8
 8000a72:	484d      	ldr	r0, [pc, #308]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a74:	f000 fd48 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000a78:	e092      	b.n	8000ba0 <stepper_half_drive+0x18c>

			case 1:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);   // IN1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	484a      	ldr	r0, [pc, #296]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a80:	f000 fd42 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);   // IN2
 8000a84:	2200      	movs	r2, #0
 8000a86:	2102      	movs	r1, #2
 8000a88:	4847      	ldr	r0, [pc, #284]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a8a:	f000 fd3d 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);   // IN3
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2104      	movs	r1, #4
 8000a92:	4845      	ldr	r0, [pc, #276]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a94:	f000 fd38 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);   // IN4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4842      	ldr	r0, [pc, #264]	; (8000ba8 <stepper_half_drive+0x194>)
 8000a9e:	f000 fd33 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000aa2:	e07d      	b.n	8000ba0 <stepper_half_drive+0x18c>

			case 2:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);   // IN1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	483f      	ldr	r0, [pc, #252]	; (8000ba8 <stepper_half_drive+0x194>)
 8000aaa:	f000 fd2d 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);   // IN2
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	483d      	ldr	r0, [pc, #244]	; (8000ba8 <stepper_half_drive+0x194>)
 8000ab4:	f000 fd28 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);   // IN3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2104      	movs	r1, #4
 8000abc:	483a      	ldr	r0, [pc, #232]	; (8000ba8 <stepper_half_drive+0x194>)
 8000abe:	f000 fd23 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);   // IN4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4838      	ldr	r0, [pc, #224]	; (8000ba8 <stepper_half_drive+0x194>)
 8000ac8:	f000 fd1e 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000acc:	e068      	b.n	8000ba0 <stepper_half_drive+0x18c>

			case 3:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);   // IN1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4835      	ldr	r0, [pc, #212]	; (8000ba8 <stepper_half_drive+0x194>)
 8000ad4:	f000 fd18 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);   // IN2
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2102      	movs	r1, #2
 8000adc:	4832      	ldr	r0, [pc, #200]	; (8000ba8 <stepper_half_drive+0x194>)
 8000ade:	f000 fd13 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);   // IN3
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4830      	ldr	r0, [pc, #192]	; (8000ba8 <stepper_half_drive+0x194>)
 8000ae8:	f000 fd0e 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);   // IN4
 8000aec:	2200      	movs	r2, #0
 8000aee:	2108      	movs	r1, #8
 8000af0:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <stepper_half_drive+0x194>)
 8000af2:	f000 fd09 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000af6:	e053      	b.n	8000ba0 <stepper_half_drive+0x18c>

			case 4:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);   // IN1
 8000af8:	2200      	movs	r2, #0
 8000afa:	2101      	movs	r1, #1
 8000afc:	482a      	ldr	r0, [pc, #168]	; (8000ba8 <stepper_half_drive+0x194>)
 8000afe:	f000 fd03 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);   // IN2
 8000b02:	2201      	movs	r2, #1
 8000b04:	2102      	movs	r1, #2
 8000b06:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b08:	f000 fcfe 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);   // IN3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b12:	f000 fcf9 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);   // IN4
 8000b16:	2200      	movs	r2, #0
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b1c:	f000 fcf4 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000b20:	e03e      	b.n	8000ba0 <stepper_half_drive+0x18c>
			case 5:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);   // IN1
 8000b22:	2200      	movs	r2, #0
 8000b24:	2101      	movs	r1, #1
 8000b26:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b28:	f000 fcee 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);   // IN2
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2102      	movs	r1, #2
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b32:	f000 fce9 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);   // IN3
 8000b36:	2200      	movs	r2, #0
 8000b38:	2104      	movs	r1, #4
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b3c:	f000 fce4 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);   // IN4
 8000b40:	2201      	movs	r2, #1
 8000b42:	2108      	movs	r1, #8
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b46:	f000 fcdf 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000b4a:	e029      	b.n	8000ba0 <stepper_half_drive+0x18c>
			case 6:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);   // IN1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b52:	f000 fcd9 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);   // IN2
 8000b56:	2200      	movs	r2, #0
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b5c:	f000 fcd4 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);   // IN3
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b66:	f000 fccf 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);   // IN4
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b70:	f000 fcca 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000b74:	e014      	b.n	8000ba0 <stepper_half_drive+0x18c>
			case 7:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);   // IN1
 8000b76:	2201      	movs	r2, #1
 8000b78:	2101      	movs	r1, #1
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b7c:	f000 fcc4 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);   // IN2
 8000b80:	2200      	movs	r2, #0
 8000b82:	2102      	movs	r1, #2
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b86:	f000 fcbf 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);   // IN3
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b90:	f000 fcba 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);   // IN4
 8000b94:	2201      	movs	r2, #1
 8000b96:	2108      	movs	r1, #8
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <stepper_half_drive+0x194>)
 8000b9a:	f000 fcb5 	bl	8001508 <HAL_GPIO_WritePin>
				  break;
 8000b9e:	bf00      	nop
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001c4 	.word	0x200001c4
 8000ba8:	40020000 	.word	0x40020000

08000bac <stepper_full_drive>:

void stepper_full_drive (int step, int stepdelay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	switch (step){
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	f200 809f 	bhi.w	8000cfc <stepper_full_drive+0x150>
 8000bbe:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <stepper_full_drive+0x18>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000bd5 	.word	0x08000bd5
 8000bc8:	08000c1f 	.word	0x08000c1f
 8000bcc:	08000c69 	.word	0x08000c69
 8000bd0:	08000cb3 	.word	0x08000cb3
				case 0:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	484a      	ldr	r0, [pc, #296]	; (8000d04 <stepper_full_drive+0x158>)
 8000bda:	f000 fc95 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN1
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f9d7 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	4846      	ldr	r0, [pc, #280]	; (8000d04 <stepper_full_drive+0x158>)
 8000bec:	f000 fc8c 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN2
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f9ce 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4841      	ldr	r0, [pc, #260]	; (8000d04 <stepper_full_drive+0x158>)
 8000bfe:	f000 fc83 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN3
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f9c5 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	483d      	ldr	r0, [pc, #244]	; (8000d04 <stepper_full_drive+0x158>)
 8000c10:	f000 fc7a 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN4
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f9bc 	bl	8000f94 <HAL_Delay>
				  break;
 8000c1c:	e06e      	b.n	8000cfc <stepper_full_drive+0x150>

			case 1:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2101      	movs	r1, #1
 8000c22:	4838      	ldr	r0, [pc, #224]	; (8000d04 <stepper_full_drive+0x158>)
 8000c24:	f000 fc70 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN1
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f9b2 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2102      	movs	r1, #2
 8000c34:	4833      	ldr	r0, [pc, #204]	; (8000d04 <stepper_full_drive+0x158>)
 8000c36:	f000 fc67 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN2
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f9a9 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2104      	movs	r1, #4
 8000c46:	482f      	ldr	r0, [pc, #188]	; (8000d04 <stepper_full_drive+0x158>)
 8000c48:	f000 fc5e 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f9a0 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	482a      	ldr	r0, [pc, #168]	; (8000d04 <stepper_full_drive+0x158>)
 8000c5a:	f000 fc55 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN4
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f997 	bl	8000f94 <HAL_Delay>
				  break;
 8000c66:	e049      	b.n	8000cfc <stepper_full_drive+0x150>

			case 2:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4825      	ldr	r0, [pc, #148]	; (8000d04 <stepper_full_drive+0x158>)
 8000c6e:	f000 fc4b 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN1
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f98d 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4821      	ldr	r0, [pc, #132]	; (8000d04 <stepper_full_drive+0x158>)
 8000c80:	f000 fc42 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN2
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f984 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2104      	movs	r1, #4
 8000c90:	481c      	ldr	r0, [pc, #112]	; (8000d04 <stepper_full_drive+0x158>)
 8000c92:	f000 fc39 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f97b 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <stepper_full_drive+0x158>)
 8000ca4:	f000 fc30 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN4
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f972 	bl	8000f94 <HAL_Delay>
				  break;
 8000cb0:	e024      	b.n	8000cfc <stepper_full_drive+0x150>

			case 3:
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4813      	ldr	r0, [pc, #76]	; (8000d04 <stepper_full_drive+0x158>)
 8000cb8:	f000 fc26 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN1
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f968 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <stepper_full_drive+0x158>)
 8000cca:	f000 fc1d 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN2
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f95f 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2104      	movs	r1, #4
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <stepper_full_drive+0x158>)
 8000cdc:	f000 fc14 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f956 	bl	8000f94 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2108      	movs	r1, #8
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <stepper_full_drive+0x158>)
 8000cee:	f000 fc0b 	bl	8001508 <HAL_GPIO_WritePin>
				  HAL_Delay(stepdelay);// IN4
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f94d 	bl	8000f94 <HAL_Delay>
				  break;
 8000cfa:	bf00      	nop
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40020000 	.word	0x40020000

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f8d0 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <OTG_FS_IRQHandler+0x10>)
 8000dbe:	f000 fd26 	bl	800180e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000e90 	.word	0x20000e90

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f006 fba0 	bl	8007540 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20010000 	.word	0x20010000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200001d8 	.word	0x200001d8
 8000e34:	200015d0 	.word	0x200015d0

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ffd7 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f006 fb5f 	bl	800754c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fb81 	bl	8000594 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000ea0:	08008004 	.word	0x08008004
  ldr r2, =_sbss
 8000ea4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000ea8:	200015cc 	.word	0x200015cc

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f94f 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff ff16 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f967 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f92f 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	200001dc 	.word	0x200001dc

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200001dc 	.word	0x200001dc

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e159      	b.n	80014d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8148 	bne.w	80014ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	2b02      	cmp	r3, #2
 8001250:	d130      	bne.n	80012b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 0201 	and.w	r2, r3, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d017      	beq.n	80012f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a2 	beq.w	80014ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b54      	ldr	r3, [pc, #336]	; (80014e8 <HAL_GPIO_Init+0x2e8>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_GPIO_Init+0x2ec>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <HAL_GPIO_Init+0x2f0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_GPIO_Init+0x202>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_GPIO_Init+0x2f4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x1fe>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <HAL_GPIO_Init+0x2f8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a46      	ldr	r2, [pc, #280]	; (80014fc <HAL_GPIO_Init+0x2fc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x1f6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a45      	ldr	r2, [pc, #276]	; (8001500 <HAL_GPIO_Init+0x300>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x1f2>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013f2:	2307      	movs	r3, #7
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x204>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	; (80014ec <HAL_GPIO_Init+0x2ec>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_GPIO_Init+0x304>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a24      	ldr	r2, [pc, #144]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x304>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_GPIO_Init+0x304>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_GPIO_Init+0x304>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_GPIO_Init+0x304>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f aea2 	bls.w	800121c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	041a      	lsls	r2, r3, #16
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43d9      	mvns	r1, r3
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	400b      	ands	r3, r1
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800156e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001570:	b08f      	sub	sp, #60	; 0x3c
 8001572:	af0a      	add	r7, sp, #40	; 0x28
 8001574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e10f      	b.n	80017a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f005 fcc6 	bl	8006f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2203      	movs	r2, #3
 80015a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 ff97 	bl	80034f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	687e      	ldr	r6, [r7, #4]
 80015cc:	466d      	mov	r5, sp
 80015ce:	f106 0410 	add.w	r4, r6, #16
 80015d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015de:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e2:	1d33      	adds	r3, r6, #4
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f001 fe6e 	bl	80032c8 <USB_CoreInit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0d0      	b.n	80017a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f001 ff85 	bl	8003514 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e04a      	b.n	80016a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	333d      	adds	r3, #61	; 0x3d
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	333c      	adds	r3, #60	; 0x3c
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	b298      	uxth	r0, r3
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3344      	adds	r3, #68	; 0x44
 800164c:	4602      	mov	r2, r0
 800164e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3340      	adds	r3, #64	; 0x40
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3348      	adds	r3, #72	; 0x48
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	334c      	adds	r3, #76	; 0x4c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3354      	adds	r3, #84	; 0x54
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	3301      	adds	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3af      	bcc.n	8001610 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e044      	b.n	8001740 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	3301      	adds	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	d3b5      	bcc.n	80016b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	687e      	ldr	r6, [r7, #4]
 8001752:	466d      	mov	r5, sp
 8001754:	f106 0410 	add.w	r4, r6, #16
 8001758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001764:	e885 0003 	stmia.w	r5, {r0, r1}
 8001768:	1d33      	adds	r3, r6, #4
 800176a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176c:	6838      	ldr	r0, [r7, #0]
 800176e:	f001 ff1d 	bl	80035ac <USB_DevInit>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e00d      	b.n	80017a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 f86c 	bl	8004876 <USB_DevDisconnect>

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_PCD_Start+0x1c>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e020      	b.n	8001806 <HAL_PCD_Start+0x5e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d109      	bne.n	80017e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d005      	beq.n	80017e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fe6f 	bl	80034d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 f81c 	bl	8004834 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800180e:	b590      	push	{r4, r7, lr}
 8001810:	b08d      	sub	sp, #52	; 0x34
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f003 f8da 	bl	80049de <USB_GetMode>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 848a 	bne.w	8002146 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 f83e 	bl	80048b8 <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8480 	beq.w	8002144 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 f82b 	bl	80048b8 <USB_ReadInterrupts>
 8001862:	4603      	mov	r3, r0
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b02      	cmp	r3, #2
 800186a:	d107      	bne.n	800187c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f002 0202 	and.w	r2, r2, #2
 800187a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f003 f819 	bl	80048b8 <USB_ReadInterrupts>
 8001886:	4603      	mov	r3, r0
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b10      	cmp	r3, #16
 800188e:	d161      	bne.n	8001954 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699a      	ldr	r2, [r3, #24]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0210 	bic.w	r2, r2, #16
 800189e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 020f 	and.w	r2, r3, #15
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	0c5b      	lsrs	r3, r3, #17
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d124      	bne.n	8001916 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d035      	beq.n	8001944 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	6a38      	ldr	r0, [r7, #32]
 80018ec:	f002 fe50 	bl	8004590 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018fc:	441a      	add	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800190e:	441a      	add	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	621a      	str	r2, [r3, #32]
 8001914:	e016      	b.n	8001944 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	0c5b      	lsrs	r3, r3, #17
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	2b06      	cmp	r3, #6
 8001920:	d110      	bne.n	8001944 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001928:	2208      	movs	r2, #8
 800192a:	4619      	mov	r1, r3
 800192c:	6a38      	ldr	r0, [r7, #32]
 800192e:	f002 fe2f 	bl	8004590 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800193e:	441a      	add	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0210 	orr.w	r2, r2, #16
 8001952:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f002 ffad 	bl	80048b8 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001964:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001968:	f040 80a7 	bne.w	8001aba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f002 ffb2 	bl	80048de <USB_ReadDevAllOutEpInterrupt>
 800197a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800197c:	e099      	b.n	8001ab2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 808e 	beq.w	8001aa6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ffd6 	bl	8004946 <USB_ReadDevOutEPInterrupt>
 800199a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00c      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b2:	461a      	mov	r2, r3
 80019b4:	2301      	movs	r3, #1
 80019b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fec2 	bl	8002744 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00c      	beq.n	80019e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d6:	461a      	mov	r2, r3
 80019d8:	2308      	movs	r3, #8
 80019da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 ff98 	bl	8002914 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d008      	beq.n	8001a00 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	015a      	lsls	r2, r3, #5
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	4413      	add	r3, r2
 80019f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019fa:	461a      	mov	r2, r3
 80019fc:	2310      	movs	r3, #16
 80019fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d030      	beq.n	8001a6c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	2b80      	cmp	r3, #128	; 0x80
 8001a14:	d109      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a28:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	78db      	ldrb	r3, [r3, #3]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f005 fb65 	bl	8007124 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a66:	461a      	mov	r2, r3
 8001a68:	2302      	movs	r3, #2
 8001a6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a82:	461a      	mov	r2, r3
 8001a84:	2320      	movs	r3, #32
 8001a86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f47f af62 	bne.w	800197e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fefa 	bl	80048b8 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ace:	f040 80db 	bne.w	8001c88 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 ff1b 	bl	8004912 <USB_ReadDevAllInEpInterrupt>
 8001adc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ae2:	e0cd      	b.n	8001c80 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80c2 	beq.w	8001c74 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 ff41 	bl	8004982 <USB_ReadDevInEPInterrupt>
 8001b00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d057      	beq.n	8001bbc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	2201      	movs	r2, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69f9      	ldr	r1, [r7, #28]
 8001b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2301      	movs	r3, #1
 8001b40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d132      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	334c      	adds	r3, #76	; 0x4c
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4403      	add	r3, r0
 8001b6a:	3348      	adds	r3, #72	; 0x48
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4419      	add	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4403      	add	r3, r0
 8001b7e:	334c      	adds	r3, #76	; 0x4c
 8001b80:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d113      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x3a2>
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	3354      	adds	r3, #84	; 0x54
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d108      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2101      	movs	r1, #1
 8001bac:	f002 ff48 	bl	8004a40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f005 fa39 	bl	800702e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d023      	beq.n	8001c62 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1c:	6a38      	ldr	r0, [r7, #32]
 8001c1e:	f001 fe29 	bl	8003874 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	3338      	adds	r3, #56	; 0x38
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	78db      	ldrb	r3, [r3, #3]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d108      	bne.n	8001c50 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2200      	movs	r2, #0
 8001c42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f005 fa7c 	bl	8007148 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2302      	movs	r3, #2
 8001c60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fcdb 	bl	800262a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	3301      	adds	r3, #1
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f47f af2e 	bne.w	8001ae4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fe13 	bl	80048b8 <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c9c:	d122      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d108      	bne.n	8001cce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fec2 	bl	8002a50 <HAL_PCDEx_LPM_Callback>
 8001ccc:	e002      	b.n	8001cd4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f005 fa1a 	bl	8007108 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fde5 	bl	80048b8 <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf8:	d112      	bne.n	8001d20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f005 f9d6 	bl	80070bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d1e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fdc7 	bl	80048b8 <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d34:	f040 80b7 	bne.w	8001ea6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2110      	movs	r1, #16
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fd8e 	bl	8003874 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d5c:	e046      	b.n	8001dec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d82:	0151      	lsls	r1, r2, #5
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	440a      	add	r2, r1
 8001d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001da4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	0151      	lsls	r1, r2, #5
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	440a      	add	r2, r1
 8001dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd6:	0151      	lsls	r1, r2, #5
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	440a      	add	r2, r1
 8001ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001de4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	3301      	adds	r3, #1
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3b3      	bcc.n	8001d5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e22:	f043 030b 	orr.w	r3, r3, #11
 8001e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e38:	f043 030b 	orr.w	r3, r3, #11
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	e015      	b.n	8001e6c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e66:	f043 030b 	orr.w	r3, r3, #11
 8001e6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e90:	461a      	mov	r2, r3
 8001e92:	f002 fdd5 	bl	8004a40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fd04 	bl	80048b8 <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eba:	d124      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fd9a 	bl	80049fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f001 fd4f 	bl	800396e <USB_GetDevSpeed>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681c      	ldr	r4, [r3, #0]
 8001edc:	f001 f9e8 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4620      	mov	r0, r4
 8001eec:	f001 fa4e 	bl	800338c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f005 f8c4 	bl	800707e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fcd4 	bl	80048b8 <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d10a      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f005 f8a1 	bl	8007062 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f002 0208 	and.w	r2, r2, #8
 8001f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 fcbf 	bl	80048b8 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d122      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f50:	2301      	movs	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
 8001f54:	e014      	b.n	8001f80 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fb27 	bl	80025c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3e5      	bcc.n	8001f56 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fc92 	bl	80048b8 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9e:	d13b      	bne.n	8002018 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	e02b      	b.n	8001ffe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3340      	adds	r3, #64	; 0x40
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d115      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001fcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da12      	bge.n	8001ff8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	333f      	adds	r3, #63	; 0x3f
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fae8 	bl	80025c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	429a      	cmp	r2, r3
 8002006:	d3ce      	bcc.n	8001fa6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fc4b 	bl	80048b8 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800202c:	d155      	bne.n	80020da <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800202e:	2301      	movs	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	e045      	b.n	80020c0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	4413      	add	r3, r2
 800203c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d12e      	bne.n	80020ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800205c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	da2b      	bge.n	80020ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800206e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002072:	429a      	cmp	r2, r3
 8002074:	d121      	bne.n	80020ba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b6:	6053      	str	r3, [r2, #4]
            break;
 80020b8:	e007      	b.n	80020ca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	3301      	adds	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3b4      	bcc.n	8002034 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fbea 	bl	80048b8 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ee:	d10a      	bne.n	8002106 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f005 f83b 	bl	800716c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fbd4 	bl	80048b8 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d115      	bne.n	8002146 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f005 f82b 	bl	8007188 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	e000      	b.n	8002146 <HAL_PCD_IRQHandler+0x938>
      return;
 8002144:	bf00      	nop
    }
  }
}
 8002146:	3734      	adds	r7, #52	; 0x34
 8002148:	46bd      	mov	sp, r7
 800214a:	bd90      	pop	{r4, r7, pc}

0800214c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_PCD_SetAddress+0x1a>
 8002162:	2302      	movs	r3, #2
 8002164:	e013      	b.n	800218e <HAL_PCD_SetAddress+0x42>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fb32 	bl	80047e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	4608      	mov	r0, r1
 80021a0:	4611      	mov	r1, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	4603      	mov	r3, r0
 80021a6:	70fb      	strb	r3, [r7, #3]
 80021a8:	460b      	mov	r3, r1
 80021aa:	803b      	strh	r3, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0f      	bge.n	80021dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 020f 	and.w	r2, r3, #15
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	3338      	adds	r3, #56	; 0x38
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	705a      	strb	r2, [r3, #1]
 80021da:	e00f      	b.n	80021fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	b2da      	uxtb	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002208:	883a      	ldrh	r2, [r7, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	78ba      	ldrb	r2, [r7, #2]
 8002212:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	785b      	ldrb	r3, [r3, #1]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002226:	78bb      	ldrb	r3, [r7, #2]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d102      	bne.n	8002232 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_PCD_EP_Open+0xaa>
 800223c:	2302      	movs	r3, #2
 800223e:	e00e      	b.n	800225e <HAL_PCD_EP_Open+0xc8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fbb2 	bl	80039b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800225c:	7afb      	ldrb	r3, [r7, #11]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	da0f      	bge.n	800229a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	3338      	adds	r3, #56	; 0x38
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	705a      	strb	r2, [r3, #1]
 8002298:	e00f      	b.n	80022ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_PCD_EP_Close+0x6e>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e00e      	b.n	80022f2 <HAL_PCD_EP_Close+0x8c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 fbf0 	bl	8003ac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	460b      	mov	r3, r1
 8002308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230a:	7afb      	ldrb	r3, [r7, #11]
 800230c:	f003 020f 	and.w	r2, r3, #15
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	3304      	adds	r3, #4
 8002322:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	b2da      	uxtb	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002356:	7afb      	ldrb	r3, [r7, #11]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	6979      	ldr	r1, [r7, #20]
 800236e:	f001 fecf 	bl	8004110 <USB_EP0StartXfer>
 8002372:	e008      	b.n	8002386 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	f001 fc7d 	bl	8003c80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	460b      	mov	r3, r1
 80023ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	7afb      	ldrb	r3, [r7, #11]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	3338      	adds	r3, #56	; 0x38
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2201      	movs	r2, #1
 80023fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002400:	7afb      	ldrb	r3, [r7, #11]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	b2da      	uxtb	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6979      	ldr	r1, [r7, #20]
 8002432:	f001 fe6d 	bl	8004110 <USB_EP0StartXfer>
 8002436:	e008      	b.n	800244a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	6979      	ldr	r1, [r7, #20]
 8002446:	f001 fc1b 	bl	8003c80 <USB_EPStartXfer>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d901      	bls.n	8002472 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e050      	b.n	8002514 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	da0f      	bge.n	800249a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	3338      	adds	r3, #56	; 0x38
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	3304      	adds	r3, #4
 8002490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	705a      	strb	r2, [r3, #1]
 8002498:	e00d      	b.n	80024b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	3304      	adds	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_PCD_EP_SetStall+0x82>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e01e      	b.n	8002514 <HAL_PCD_EP_SetStall+0xc0>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 f8ab 	bl	8004640 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	b2d9      	uxtb	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002504:	461a      	mov	r2, r3
 8002506:	f002 fa9b 	bl	8004a40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	f003 020f 	and.w	r2, r3, #15
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d901      	bls.n	800253a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e042      	b.n	80025c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800253a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800253e:	2b00      	cmp	r3, #0
 8002540:	da0f      	bge.n	8002562 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	3338      	adds	r3, #56	; 0x38
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	705a      	strb	r2, [r3, #1]
 8002560:	e00f      	b.n	8002582 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	f003 020f 	and.w	r2, r3, #15
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_PCD_EP_ClrStall+0x86>
 800259e:	2302      	movs	r3, #2
 80025a0:	e00e      	b.n	80025c0 <HAL_PCD_EP_ClrStall+0xa4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68f9      	ldr	r1, [r7, #12]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 f8b3 	bl	800471c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80025d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da0c      	bge.n	80025f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 020f 	and.w	r2, r3, #15
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	3338      	adds	r3, #56	; 0x38
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e00c      	b.n	8002610 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	4618      	mov	r0, r3
 8002618:	f001 fed2 	bl	80043c0 <USB_EPStopXfer>
 800261c:	4603      	mov	r3, r0
 800261e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002620:	7afb      	ldrb	r3, [r7, #11]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08a      	sub	sp, #40	; 0x28
 800262e:	af02      	add	r7, sp, #8
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3338      	adds	r3, #56	; 0x38
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1a      	ldr	r2, [r3, #32]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	429a      	cmp	r2, r3
 800265c:	d901      	bls.n	8002662 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06c      	b.n	800273c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	429a      	cmp	r2, r3
 8002676:	d902      	bls.n	800267e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3303      	adds	r3, #3
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002686:	e02b      	b.n	80026e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d902      	bls.n	80026a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3303      	adds	r3, #3
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4603      	mov	r3, r0
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f001 ff26 	bl	8004514 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	441a      	add	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d809      	bhi.n	800270a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026fe:	429a      	cmp	r2, r3
 8002700:	d203      	bcs.n	800270a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1be      	bne.n	8002688 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	429a      	cmp	r2, r3
 8002714:	d811      	bhi.n	800273a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	2201      	movs	r2, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	43db      	mvns	r3, r3
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002736:	4013      	ands	r3, r2
 8002738:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	333c      	adds	r3, #60	; 0x3c
 800275c:	3304      	adds	r3, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d17b      	bne.n	8002872 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4a61      	ldr	r2, [pc, #388]	; (800290c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	f240 80b9 	bls.w	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80b3 	beq.w	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a6:	461a      	mov	r2, r3
 80027a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ac:	6093      	str	r3, [r2, #8]
 80027ae:	e0a7      	b.n	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c6:	461a      	mov	r2, r3
 80027c8:	2320      	movs	r3, #32
 80027ca:	6093      	str	r3, [r2, #8]
 80027cc:	e098      	b.n	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 8093 	bne.w	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4a4b      	ldr	r2, [pc, #300]	; (800290c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d90f      	bls.n	8002802 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f8:	461a      	mov	r2, r3
 80027fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	e07e      	b.n	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	3304      	adds	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	0159      	lsls	r1, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	440b      	add	r3, r1
 8002824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d114      	bne.n	8002864 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800284c:	461a      	mov	r2, r3
 800284e:	2101      	movs	r1, #1
 8002850:	f002 f8f6 	bl	8004a40 <USB_EP0_OutStart>
 8002854:	e006      	b.n	8002864 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	441a      	add	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f004 fbc4 	bl	8006ff8 <HAL_PCD_DataOutStageCallback>
 8002870:	e046      	b.n	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d124      	bne.n	80028c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002890:	461a      	mov	r2, r3
 8002892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002896:	6093      	str	r3, [r2, #8]
 8002898:	e032      	b.n	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	2320      	movs	r3, #32
 80028b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f004 fb9b 	bl	8006ff8 <HAL_PCD_DataOutStageCallback>
 80028c2:	e01d      	b.n	8002900 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d114      	bne.n	80028f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028ec:	461a      	mov	r2, r3
 80028ee:	2100      	movs	r1, #0
 80028f0:	f002 f8a6 	bl	8004a40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f004 fb7c 	bl	8006ff8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	4f54300a 	.word	0x4f54300a
 8002910:	4f54310a 	.word	0x4f54310a

08002914 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	333c      	adds	r3, #60	; 0x3c
 800292c:	3304      	adds	r3, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <PCD_EP_OutSetupPacket_int+0x88>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d90e      	bls.n	8002968 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002966:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f004 fb33 	bl	8006fd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <PCD_EP_OutSetupPacket_int+0x88>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d90c      	bls.n	8002990 <PCD_EP_OutSetupPacket_int+0x7c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002988:	461a      	mov	r2, r3
 800298a:	2101      	movs	r1, #1
 800298c:	f002 f858 	bl	8004a40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	4f54300a 	.word	0x4f54300a

080029a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
 80029ac:	4613      	mov	r3, r2
 80029ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d107      	bne.n	80029ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029be:	883b      	ldrh	r3, [r7, #0]
 80029c0:	0419      	lsls	r1, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
 80029cc:	e028      	b.n	8002a20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4413      	add	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e00d      	b.n	80029fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3340      	adds	r3, #64	; 0x40
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4413      	add	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	3301      	adds	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3ec      	bcc.n	80029e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a08:	883b      	ldrh	r3, [r7, #0]
 8002a0a:	0418      	lsls	r0, r3, #16
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4302      	orrs	r2, r0
 8002a18:	3340      	adds	r3, #64	; 0x40
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e267      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d075      	beq.n	8002b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a86:	4b88      	ldr	r3, [pc, #544]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d00c      	beq.n	8002aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4b85      	ldr	r3, [pc, #532]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d112      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9e:	4b82      	ldr	r3, [pc, #520]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b7e      	ldr	r3, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05b      	beq.n	8002b70 <HAL_RCC_OscConfig+0x108>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d157      	bne.n	8002b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e242      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x74>
 8002ace:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a75      	ldr	r2, [pc, #468]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xb0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x98>
 8002ae6:	4b70      	ldr	r3, [pc, #448]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6f      	ldr	r2, [pc, #444]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b6d      	ldr	r3, [pc, #436]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6c      	ldr	r2, [pc, #432]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xb0>
 8002b00:	4b69      	ldr	r3, [pc, #420]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a68      	ldr	r2, [pc, #416]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b66      	ldr	r3, [pc, #408]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fa2c 	bl	8000f7c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fa28 	bl	8000f7c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e207      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xc0>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fa18 	bl	8000f7c <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fa14 	bl	8000f7c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1f3      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	4b51      	ldr	r3, [pc, #324]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0xe8>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d063      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b44      	ldr	r3, [pc, #272]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x152>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1c7      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4937      	ldr	r1, [pc, #220]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_RCC_OscConfig+0x244>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe f9cd 	bl	8000f7c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe f9c9 	bl	8000f7c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1a8      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4925      	ldr	r1, [pc, #148]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCC_OscConfig+0x244>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe f9ac 	bl	8000f7c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe f9a8 	bl	8000f7c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e187      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d036      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_RCC_OscConfig+0x248>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe f98c 	bl	8000f7c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe f988 	bl	8000f7c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e167      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x200>
 8002c86:	e01b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_OscConfig+0x248>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe f975 	bl	8000f7c <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	e00e      	b.n	8002cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe f971 	bl	8000f7c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d907      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e150      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	42470000 	.word	0x42470000
 8002cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ea      	bne.n	8002c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8097 	beq.w	8002dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b81      	ldr	r3, [pc, #516]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b7d      	ldr	r3, [pc, #500]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a7c      	ldr	r2, [pc, #496]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b7a      	ldr	r3, [pc, #488]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b77      	ldr	r3, [pc, #476]	; (8002edc <HAL_RCC_OscConfig+0x474>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0a:	4b74      	ldr	r3, [pc, #464]	; (8002edc <HAL_RCC_OscConfig+0x474>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a73      	ldr	r2, [pc, #460]	; (8002edc <HAL_RCC_OscConfig+0x474>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe f931 	bl	8000f7c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe f92d 	bl	8000f7c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e10c      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <HAL_RCC_OscConfig+0x474>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x2ea>
 8002d44:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a63      	ldr	r2, [pc, #396]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	e01c      	b.n	8002d8c <HAL_RCC_OscConfig+0x324>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x30c>
 8002d5a:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a5e      	ldr	r2, [pc, #376]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
 8002d66:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a5b      	ldr	r2, [pc, #364]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0x324>
 8002d74:	4b58      	ldr	r3, [pc, #352]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	4a57      	ldr	r2, [pc, #348]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d80:	4b55      	ldr	r3, [pc, #340]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a54      	ldr	r2, [pc, #336]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002d86:	f023 0304 	bic.w	r3, r3, #4
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe f8f2 	bl	8000f7c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe f8ee 	bl	8000f7c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0cb      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db2:	4b49      	ldr	r3, [pc, #292]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0ee      	beq.n	8002d9c <HAL_RCC_OscConfig+0x334>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f8dc 	bl	8000f7c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe f8d8 	bl	8000f7c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0b5      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dde:	4b3e      	ldr	r3, [pc, #248]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4a38      	ldr	r2, [pc, #224]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a1 	beq.w	8002f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e06:	4b34      	ldr	r3, [pc, #208]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d05c      	beq.n	8002ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d141      	bne.n	8002e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <HAL_RCC_OscConfig+0x478>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe f8ac 	bl	8000f7c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe f8a8 	bl	8000f7c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e087      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	491b      	ldr	r1, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x478>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe f881 	bl	8000f7c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe f87d 	bl	8000f7c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e05c      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x416>
 8002e9c:	e054      	b.n	8002f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x478>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f86a 	bl	8000f7c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe f866 	bl	8000f7c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e045      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x444>
 8002eca:	e03d      	b.n	8002f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e038      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x4ec>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d028      	beq.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d121      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d11a      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f14:	4013      	ands	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d111      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0cc      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b68      	ldr	r3, [pc, #416]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d90c      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b65      	ldr	r3, [pc, #404]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b63      	ldr	r3, [pc, #396]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494d      	ldr	r1, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d044      	beq.n	8003078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d119      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d003      	beq.n	8003016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003012:	2b03      	cmp	r3, #3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e067      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4934      	ldr	r1, [pc, #208]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003048:	f7fd ff98 	bl	8000f7c <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fd ff94 	bl	8000f7c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e04f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d20c      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e032      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030de:	f000 f821 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	490a      	ldr	r1, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fef8 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00
 8003114:	40023800 	.word	0x40023800
 8003118:	08007fb0 	.word	0x08007fb0
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b090      	sub	sp, #64	; 0x40
 800312a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	2300      	movs	r3, #0
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d00d      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x40>
 8003148:	2b08      	cmp	r3, #8
 800314a:	f200 80a1 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x16c>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 8003152:	2b04      	cmp	r3, #4
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0x3a>
 8003156:	e09b      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800315c:	e09b      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003162:	e098      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316e:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d028      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	2200      	movs	r2, #0
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	627a      	str	r2, [r7, #36]	; 0x24
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800318c:	2100      	movs	r1, #0
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003190:	fb03 f201 	mul.w	r2, r3, r1
 8003194:	2300      	movs	r3, #0
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	4413      	add	r3, r2
 800319c:	4a43      	ldr	r2, [pc, #268]	; (80032ac <HAL_RCC_GetSysClockFreq+0x188>)
 800319e:	fba0 1202 	umull	r1, r2, r0, r2
 80031a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031a4:	460a      	mov	r2, r1
 80031a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80031a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031aa:	4413      	add	r3, r2
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	2200      	movs	r2, #0
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	61fa      	str	r2, [r7, #28]
 80031b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031be:	f7fd f867 	bl	8000290 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4613      	mov	r3, r2
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ca:	e053      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	617a      	str	r2, [r7, #20]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031de:	f04f 0b00 	mov.w	fp, #0
 80031e2:	4652      	mov	r2, sl
 80031e4:	465b      	mov	r3, fp
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	ebb2 080a 	subs.w	r8, r2, sl
 80031fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800320e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003216:	ebb2 0408 	subs.w	r4, r2, r8
 800321a:	eb63 0509 	sbc.w	r5, r3, r9
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	00eb      	lsls	r3, r5, #3
 8003228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800322c:	00e2      	lsls	r2, r4, #3
 800322e:	4614      	mov	r4, r2
 8003230:	461d      	mov	r5, r3
 8003232:	eb14 030a 	adds.w	r3, r4, sl
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	eb45 030b 	adc.w	r3, r5, fp
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800324a:	4629      	mov	r1, r5
 800324c:	028b      	lsls	r3, r1, #10
 800324e:	4621      	mov	r1, r4
 8003250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003254:	4621      	mov	r1, r4
 8003256:	028a      	lsls	r2, r1, #10
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	2200      	movs	r2, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003268:	f7fd f812 	bl	8000290 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4613      	mov	r3, r2
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003298:	4618      	mov	r0, r3
 800329a:	3740      	adds	r7, #64	; 0x40
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	00f42400 	.word	0x00f42400
 80032ac:	017d7840 	.word	0x017d7840

080032b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000000 	.word	0x20000000

080032c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032c8:	b084      	sub	sp, #16
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	f107 001c 	add.w	r0, r7, #28
 80032d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d122      	bne.n	8003326 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f001 fbee 	bl	8004afc <USB_CoreReset>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]
 8003324:	e01a      	b.n	800335c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f001 fbe2 	bl	8004afc <USB_CoreReset>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800333c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
 800334e:	e005      	b.n	800335c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	2b01      	cmp	r3, #1
 8003360:	d10b      	bne.n	800337a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f043 0206 	orr.w	r2, r3, #6
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003386:	b004      	add	sp, #16
 8003388:	4770      	bx	lr
	...

0800338c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d165      	bne.n	800346c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4a41      	ldr	r2, [pc, #260]	; (80034a8 <USB_SetTurnaroundTime+0x11c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d906      	bls.n	80033b6 <USB_SetTurnaroundTime+0x2a>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a40      	ldr	r2, [pc, #256]	; (80034ac <USB_SetTurnaroundTime+0x120>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d202      	bcs.n	80033b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033b0:	230f      	movs	r3, #15
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	e062      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4a3c      	ldr	r2, [pc, #240]	; (80034ac <USB_SetTurnaroundTime+0x120>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d306      	bcc.n	80033cc <USB_SetTurnaroundTime+0x40>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4a3b      	ldr	r2, [pc, #236]	; (80034b0 <USB_SetTurnaroundTime+0x124>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d202      	bcs.n	80033cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80033c6:	230e      	movs	r3, #14
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	e057      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <USB_SetTurnaroundTime+0x124>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d306      	bcc.n	80033e2 <USB_SetTurnaroundTime+0x56>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4a37      	ldr	r2, [pc, #220]	; (80034b4 <USB_SetTurnaroundTime+0x128>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d202      	bcs.n	80033e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80033dc:	230d      	movs	r3, #13
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e04c      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4a33      	ldr	r2, [pc, #204]	; (80034b4 <USB_SetTurnaroundTime+0x128>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d306      	bcc.n	80033f8 <USB_SetTurnaroundTime+0x6c>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <USB_SetTurnaroundTime+0x12c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d802      	bhi.n	80033f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80033f2:	230c      	movs	r3, #12
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e041      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <USB_SetTurnaroundTime+0x12c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d906      	bls.n	800340e <USB_SetTurnaroundTime+0x82>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4a2e      	ldr	r2, [pc, #184]	; (80034bc <USB_SetTurnaroundTime+0x130>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d802      	bhi.n	800340e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003408:	230b      	movs	r3, #11
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e036      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <USB_SetTurnaroundTime+0x130>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d906      	bls.n	8003424 <USB_SetTurnaroundTime+0x98>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <USB_SetTurnaroundTime+0x134>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d802      	bhi.n	8003424 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800341e:	230a      	movs	r3, #10
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e02b      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <USB_SetTurnaroundTime+0x134>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d906      	bls.n	800343a <USB_SetTurnaroundTime+0xae>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <USB_SetTurnaroundTime+0x138>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d202      	bcs.n	800343a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003434:	2309      	movs	r3, #9
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e020      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <USB_SetTurnaroundTime+0x138>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d306      	bcc.n	8003450 <USB_SetTurnaroundTime+0xc4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <USB_SetTurnaroundTime+0x13c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d802      	bhi.n	8003450 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800344a:	2308      	movs	r3, #8
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e015      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <USB_SetTurnaroundTime+0x13c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d906      	bls.n	8003466 <USB_SetTurnaroundTime+0xda>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <USB_SetTurnaroundTime+0x140>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d202      	bcs.n	8003466 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003460:	2307      	movs	r3, #7
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e00a      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003466:	2306      	movs	r3, #6
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e007      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003472:	2309      	movs	r3, #9
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e001      	b.n	800347c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003478:	2309      	movs	r3, #9
 800347a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	029b      	lsls	r3, r3, #10
 8003490:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	00d8acbf 	.word	0x00d8acbf
 80034ac:	00e4e1c0 	.word	0x00e4e1c0
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	01067380 	.word	0x01067380
 80034b8:	011a499f 	.word	0x011a499f
 80034bc:	01312cff 	.word	0x01312cff
 80034c0:	014ca43f 	.word	0x014ca43f
 80034c4:	016e3600 	.word	0x016e3600
 80034c8:	01a6ab1f 	.word	0x01a6ab1f
 80034cc:	01e84800 	.word	0x01e84800

080034d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d115      	bne.n	8003562 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003542:	2001      	movs	r0, #1
 8003544:	f7fd fd26 	bl	8000f94 <HAL_Delay>
      ms++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f001 fa45 	bl	80049de <USB_GetMode>
 8003554:	4603      	mov	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d01e      	beq.n	8003598 <USB_SetCurrentMode+0x84>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b31      	cmp	r3, #49	; 0x31
 800355e:	d9f0      	bls.n	8003542 <USB_SetCurrentMode+0x2e>
 8003560:	e01a      	b.n	8003598 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d115      	bne.n	8003594 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003574:	2001      	movs	r0, #1
 8003576:	f7fd fd0d 	bl	8000f94 <HAL_Delay>
      ms++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 fa2c 	bl	80049de <USB_GetMode>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <USB_SetCurrentMode+0x84>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b31      	cmp	r3, #49	; 0x31
 8003590:	d9f0      	bls.n	8003574 <USB_SetCurrentMode+0x60>
 8003592:	e001      	b.n	8003598 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e005      	b.n	80035a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b32      	cmp	r3, #50	; 0x32
 800359c:	d101      	bne.n	80035a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035ac:	b084      	sub	sp, #16
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e009      	b.n	80035e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3340      	adds	r3, #64	; 0x40
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	2200      	movs	r2, #0
 80035d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	3301      	adds	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b0e      	cmp	r3, #14
 80035e4:	d9f2      	bls.n	80035cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11c      	bne.n	8003626 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
 8003624:	e00b      	b.n	800363e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003644:	461a      	mov	r2, r3
 8003646:	2300      	movs	r3, #0
 8003648:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003650:	4619      	mov	r1, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	461a      	mov	r2, r3
 800365a:	680b      	ldr	r3, [r1, #0]
 800365c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10c      	bne.n	800367e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d104      	bne.n	8003674 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800366a:	2100      	movs	r1, #0
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f965 	bl	800393c <USB_SetDevSpeed>
 8003672:	e008      	b.n	8003686 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003674:	2101      	movs	r1, #1
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f960 	bl	800393c <USB_SetDevSpeed>
 800367c:	e003      	b.n	8003686 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800367e:	2103      	movs	r1, #3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f95b 	bl	800393c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003686:	2110      	movs	r1, #16
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8f3 	bl	8003874 <USB_FlushTxFifo>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f91f 	bl	80038dc <USB_FlushRxFifo>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	461a      	mov	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	461a      	mov	r2, r3
 80036bc:	2300      	movs	r3, #0
 80036be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	461a      	mov	r2, r3
 80036c8:	2300      	movs	r3, #0
 80036ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e043      	b.n	800375a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e8:	d118      	bne.n	800371c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fc:	461a      	mov	r2, r3
 80036fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e013      	b.n	800372e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003712:	461a      	mov	r2, r3
 8003714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e008      	b.n	800372e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	461a      	mov	r2, r3
 800372a:	2300      	movs	r3, #0
 800372c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373a:	461a      	mov	r2, r3
 800373c:	2300      	movs	r3, #0
 800373e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	461a      	mov	r2, r3
 800374e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003752:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	3301      	adds	r3, #1
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	429a      	cmp	r2, r3
 8003760:	d3b7      	bcc.n	80036d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e043      	b.n	80037f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800377a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800377e:	d118      	bne.n	80037b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e013      	b.n	80037c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a8:	461a      	mov	r2, r3
 80037aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	e008      	b.n	80037c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	461a      	mov	r2, r3
 80037e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3301      	adds	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3b7      	bcc.n	8003768 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003818:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f043 0210 	orr.w	r2, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <USB_DevInit+0x2c4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800386c:	b004      	add	sp, #16
 800386e:	4770      	bx	lr
 8003870:	803c3800 	.word	0x803c3800

08003874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <USB_FlushTxFifo+0x64>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e01b      	b.n	80038cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	daf2      	bge.n	8003882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	019b      	lsls	r3, r3, #6
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <USB_FlushTxFifo+0x64>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e006      	b.n	80038cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d0f0      	beq.n	80038ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	00030d40 	.word	0x00030d40

080038dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3301      	adds	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a11      	ldr	r2, [pc, #68]	; (8003938 <USB_FlushRxFifo+0x5c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e018      	b.n	800392c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	daf2      	bge.n	80038e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2210      	movs	r2, #16
 800390a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <USB_FlushRxFifo+0x5c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e006      	b.n	800392c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d0f0      	beq.n	800390c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	00030d40 	.word	0x00030d40

0800393c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0306 	and.w	r3, r3, #6
 8003986:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
 8003992:	e00a      	b.n	80039aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d002      	beq.n	80039a0 <USB_GetDevSpeed+0x32>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b06      	cmp	r3, #6
 800399e:	d102      	bne.n	80039a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039a0:	2302      	movs	r3, #2
 80039a2:	75fb      	strb	r3, [r7, #23]
 80039a4:	e001      	b.n	80039aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039a6:	230f      	movs	r3, #15
 80039a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d13a      	bne.n	8003a4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d155      	bne.n	8003ab8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	791b      	ldrb	r3, [r3, #4]
 8003a26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	059b      	lsls	r3, r3, #22
 8003a2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a30:	4313      	orrs	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e036      	b.n	8003ab8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11a      	bne.n	8003ab8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	791b      	ldrb	r3, [r3, #4]
 8003a9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d161      	bne.n	8003ba8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003afa:	d11f      	bne.n	8003b3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	0151      	lsls	r1, r2, #5
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	440a      	add	r2, r1
 8003b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	68f9      	ldr	r1, [r7, #12]
 8003b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b80:	4013      	ands	r3, r2
 8003b82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	0159      	lsls	r1, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	440b      	add	r3, r1
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <USB_DeactivateEndpoint+0x1b0>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
 8003ba6:	e060      	b.n	8003c6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bbe:	d11f      	bne.n	8003c00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c20:	4013      	ands	r3, r2
 8003c22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c44:	4013      	ands	r3, r2
 8003c46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	0159      	lsls	r1, r3, #5
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	4619      	mov	r1, r3
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <USB_DeactivateEndpoint+0x1b4>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	ec337800 	.word	0xec337800
 8003c7c:	eff37800 	.word	0xeff37800

08003c80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	f040 815c 	bne.w	8003f5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d132      	bne.n	8003d10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	0151      	lsls	r1, r2, #5
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d08:	0cdb      	lsrs	r3, r3, #19
 8003d0a:	04db      	lsls	r3, r3, #19
 8003d0c:	6113      	str	r3, [r2, #16]
 8003d0e:	e074      	b.n	8003dfa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2a:	0cdb      	lsrs	r3, r3, #19
 8003d2c:	04db      	lsls	r3, r3, #19
 8003d2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	440b      	add	r3, r1
 8003d6c:	1e59      	subs	r1, r3, #1
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d76:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d78:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <USB_EPStartXfer+0x370>)
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	69b9      	ldr	r1, [r7, #24]
 8003d7e:	0148      	lsls	r0, r1, #5
 8003d80:	69f9      	ldr	r1, [r7, #28]
 8003d82:	4401      	add	r1, r0
 8003d84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	0148      	lsls	r0, r1, #5
 8003da6:	69f9      	ldr	r1, [r7, #28]
 8003da8:	4401      	add	r1, r0
 8003daa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dae:	4313      	orrs	r3, r2
 8003db0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	791b      	ldrb	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d11f      	bne.n	8003dfa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003dd8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	0151      	lsls	r1, r2, #5
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	440a      	add	r2, r1
 8003df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003df8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d14b      	bne.n	8003e98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	461a      	mov	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	791b      	ldrb	r3, [r3, #4]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d128      	bne.n	8003e76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d110      	bne.n	8003e56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	0151      	lsls	r1, r2, #5
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	440a      	add	r2, r1
 8003e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	e00f      	b.n	8003e76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e133      	b.n	8004100 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	0151      	lsls	r1, r2, #5
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	440a      	add	r2, r1
 8003eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d015      	beq.n	8003eec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 811b 	beq.w	8004100 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	69f9      	ldr	r1, [r7, #28]
 8003ee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	634b      	str	r3, [r1, #52]	; 0x34
 8003eea:	e109      	b.n	8004100 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d110      	bne.n	8003f1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e00f      	b.n	8003f3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	b298      	uxth	r0, r3
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4603      	mov	r3, r0
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fade 	bl	8004514 <USB_WritePacket>
 8003f58:	e0d2      	b.n	8004100 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f74:	0cdb      	lsrs	r3, r3, #19
 8003f76:	04db      	lsls	r3, r3, #19
 8003f78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	0151      	lsls	r1, r2, #5
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	440a      	add	r2, r1
 8003f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d126      	bne.n	8003ff4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	0148      	lsls	r0, r1, #5
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	4401      	add	r1, r0
 8003fc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fea:	6113      	str	r3, [r2, #16]
 8003fec:	e03a      	b.n	8004064 <USB_EPStartXfer+0x3e4>
 8003fee:	bf00      	nop
 8003ff0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	1e5a      	subs	r2, r3, #1
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	8afa      	ldrh	r2, [r7, #22]
 8004010:	fb03 f202 	mul.w	r2, r3, r2
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	8afb      	ldrh	r3, [r7, #22]
 8004028:	04d9      	lsls	r1, r3, #19
 800402a:	4b38      	ldr	r3, [pc, #224]	; (800410c <USB_EPStartXfer+0x48c>)
 800402c:	400b      	ands	r3, r1
 800402e:	69b9      	ldr	r1, [r7, #24]
 8004030:	0148      	lsls	r0, r1, #5
 8004032:	69f9      	ldr	r1, [r7, #28]
 8004034:	4401      	add	r1, r0
 8004036:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	0148      	lsls	r0, r1, #5
 8004058:	69f9      	ldr	r1, [r7, #28]
 800405a:	4401      	add	r1, r0
 800405c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10d      	bne.n	8004086 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6919      	ldr	r1, [r3, #16]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	460a      	mov	r2, r1
 8004084:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	791b      	ldrb	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d128      	bne.n	80040e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d110      	bne.n	80040c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e00f      	b.n	80040e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	1ff80000 	.word	0x1ff80000

08004110 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 80ce 	bne.w	80042ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d132      	bne.n	80041a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	440a      	add	r2, r1
 8004150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800415c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004198:	0cdb      	lsrs	r3, r3, #19
 800419a:	04db      	lsls	r3, r3, #19
 800419c:	6113      	str	r3, [r2, #16]
 800419e:	e04e      	b.n	800423e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ba:	0cdb      	lsrs	r3, r3, #19
 80041bc:	04db      	lsls	r3, r3, #19
 80041be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	0151      	lsls	r1, r2, #5
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	440a      	add	r2, r1
 80041d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d903      	bls.n	80041f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422e:	6939      	ldr	r1, [r7, #16]
 8004230:	0148      	lsls	r0, r1, #5
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	4401      	add	r1, r0
 8004236:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800423a:	4313      	orrs	r3, r2
 800423c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d11e      	bne.n	8004282 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	e097      	b.n	80043b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8083 	beq.w	80043b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	6979      	ldr	r1, [r7, #20]
 80042c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c8:	4313      	orrs	r3, r2
 80042ca:	634b      	str	r3, [r1, #52]	; 0x34
 80042cc:	e071      	b.n	80043b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e8:	0cdb      	lsrs	r3, r3, #19
 80042ea:	04db      	lsls	r3, r3, #19
 80042ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004308:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800430c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004310:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004360:	6939      	ldr	r1, [r7, #16]
 8004362:	0148      	lsls	r0, r1, #5
 8004364:	6979      	ldr	r1, [r7, #20]
 8004366:	4401      	add	r1, r0
 8004368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800436c:	4313      	orrs	r3, r2
 800436e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d10d      	bne.n	8004392 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	460a      	mov	r2, r1
 8004390:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d14a      	bne.n	8004474 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043f6:	f040 8086 	bne.w	8004506 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	0151      	lsls	r1, r2, #5
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	440a      	add	r2, r1
 8004414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004418:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800441c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004440:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f242 7210 	movw	r2, #10000	; 0x2710
 800444e:	4293      	cmp	r3, r2
 8004450:	d902      	bls.n	8004458 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
          break;
 8004456:	e056      	b.n	8004506 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800446c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004470:	d0e7      	beq.n	8004442 <USB_EPStopXfer+0x82>
 8004472:	e048      	b.n	8004506 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800448c:	d13b      	bne.n	8004506 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f242 7210 	movw	r2, #10000	; 0x2710
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d902      	bls.n	80044ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ea:	e00c      	b.n	8004506 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004504:	d0e7      	beq.n	80044d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004506:	7dfb      	ldrb	r3, [r7, #23]
}
 8004508:	4618      	mov	r0, r3
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004514:	b480      	push	{r7}
 8004516:	b089      	sub	sp, #36	; 0x24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	460b      	mov	r3, r1
 8004524:	71fb      	strb	r3, [r7, #7]
 8004526:	4613      	mov	r3, r2
 8004528:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004532:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d123      	bne.n	8004582 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800453a:	88bb      	ldrh	r3, [r7, #4]
 800453c:	3303      	adds	r3, #3
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e018      	b.n	800457a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	031a      	lsls	r2, r3, #12
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004554:	461a      	mov	r2, r3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	3301      	adds	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3301      	adds	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	3301      	adds	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3301      	adds	r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	3301      	adds	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	429a      	cmp	r2, r3
 8004580:	d3e2      	bcc.n	8004548 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3724      	adds	r7, #36	; 0x24
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004590:	b480      	push	{r7}
 8004592:	b08b      	sub	sp, #44	; 0x2c
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	4613      	mov	r3, r2
 800459c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	e014      	b.n	80045e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	3301      	adds	r3, #1
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	3301      	adds	r3, #1
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	3301      	adds	r3, #1
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	3301      	adds	r3, #1
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	3301      	adds	r3, #1
 80045e4:	623b      	str	r3, [r7, #32]
 80045e6:	6a3a      	ldr	r2, [r7, #32]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d3e6      	bcc.n	80045bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045ee:	8bfb      	ldrh	r3, [r7, #30]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01e      	beq.n	8004632 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fe:	461a      	mov	r2, r3
 8004600:	f107 0310 	add.w	r3, r7, #16
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	b2da      	uxtb	r2, r3
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	701a      	strb	r2, [r3, #0]
      i++;
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	3301      	adds	r3, #1
 800461e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	3301      	adds	r3, #1
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004626:	8bfb      	ldrh	r3, [r7, #30]
 8004628:	3b01      	subs	r3, #1
 800462a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800462c:	8bfb      	ldrh	r3, [r7, #30]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ea      	bne.n	8004608 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004634:	4618      	mov	r0, r3
 8004636:	372c      	adds	r7, #44	; 0x2c
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	785b      	ldrb	r3, [r3, #1]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d12c      	bne.n	80046b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	db12      	blt.n	8004694 <USB_EPSetStall+0x54>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00f      	beq.n	8004694 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004692:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e02b      	b.n	800470e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db12      	blt.n	80046ee <USB_EPSetStall+0xae>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00f      	beq.n	80046ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800470c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	785b      	ldrb	r3, [r3, #1]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d128      	bne.n	800478a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004756:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d003      	beq.n	8004768 <USB_EPClearStall+0x4c>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	791b      	ldrb	r3, [r3, #4]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d138      	bne.n	80047da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e027      	b.n	80047da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	791b      	ldrb	r3, [r3, #4]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d003      	beq.n	80047ba <USB_EPClearStall+0x9e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	791b      	ldrb	r3, [r3, #4]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d10f      	bne.n	80047da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004806:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800480a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800481c:	68f9      	ldr	r1, [r7, #12]
 800481e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004862:	f023 0302 	bic.w	r3, r3, #2
 8004866:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004890:	f023 0303 	bic.w	r3, r3, #3
 8004894:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a4:	f043 0302 	orr.w	r3, r3, #2
 80048a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4013      	ands	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048d0:	68fb      	ldr	r3, [r7, #12]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	0c1b      	lsrs	r3, r3, #16
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	b29b      	uxth	r3, r3
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	4013      	ands	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004974:	68bb      	ldr	r3, [r7, #8]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004982:	b480      	push	{r7}
 8004984:	b087      	sub	sp, #28
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4013      	ands	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049d0:	68bb      	ldr	r3, [r7, #8]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0301 	and.w	r3, r3, #1
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a18:	f023 0307 	bic.w	r3, r3, #7
 8004a1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	333c      	adds	r3, #60	; 0x3c
 8004a56:	3304      	adds	r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <USB_EP0_OutStart+0xb8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d90a      	bls.n	8004a7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a74:	d101      	bne.n	8004a7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e037      	b.n	8004aea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa8:	f043 0318 	orr.w	r3, r3, #24
 8004aac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004abc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ac0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d10f      	bne.n	8004ae8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	461a      	mov	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	4f54300a 	.word	0x4f54300a

08004afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <USB_CoreReset+0x64>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e01b      	b.n	8004b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	daf2      	bge.n	8004b08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3301      	adds	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <USB_CoreReset+0x64>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e006      	b.n	8004b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d0f0      	beq.n	8004b32 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	00030d40 	.word	0x00030d40

08004b64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b74:	f002 fca0 	bl	80074b8 <USBD_static_malloc>
 8004b78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	32b0      	adds	r2, #176	; 0xb0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b90:	2302      	movs	r3, #2
 8004b92:	e0d4      	b.n	8004d3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004b94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004b98:	2100      	movs	r1, #0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f002 fd08 	bl	80075b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	32b0      	adds	r2, #176	; 0xb0
 8004baa:	68f9      	ldr	r1, [r7, #12]
 8004bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	32b0      	adds	r2, #176	; 0xb0
 8004bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	7c1b      	ldrb	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d138      	bne.n	8004c3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004bcc:	4b5e      	ldr	r3, [pc, #376]	; (8004d48 <USBD_CDC_Init+0x1e4>)
 8004bce:	7819      	ldrb	r1, [r3, #0]
 8004bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f002 fb4b 	bl	8007272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004bdc:	4b5a      	ldr	r3, [pc, #360]	; (8004d48 <USBD_CDC_Init+0x1e4>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3324      	adds	r3, #36	; 0x24
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bf6:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <USBD_CDC_Init+0x1e8>)
 8004bf8:	7819      	ldrb	r1, [r3, #0]
 8004bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bfe:	2202      	movs	r2, #2
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f002 fb36 	bl	8007272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c06:	4b51      	ldr	r3, [pc, #324]	; (8004d4c <USBD_CDC_Init+0x1e8>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	f003 020f 	and.w	r2, r3, #15
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c1e:	2201      	movs	r2, #1
 8004c20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c22:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <USBD_CDC_Init+0x1ec>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3326      	adds	r3, #38	; 0x26
 8004c38:	2210      	movs	r2, #16
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	e035      	b.n	8004caa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c3e:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <USBD_CDC_Init+0x1e4>)
 8004c40:	7819      	ldrb	r1, [r3, #0]
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	2202      	movs	r2, #2
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f002 fb13 	bl	8007272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c4c:	4b3e      	ldr	r3, [pc, #248]	; (8004d48 <USBD_CDC_Init+0x1e4>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3324      	adds	r3, #36	; 0x24
 8004c62:	2201      	movs	r2, #1
 8004c64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <USBD_CDC_Init+0x1e8>)
 8004c68:	7819      	ldrb	r1, [r3, #0]
 8004c6a:	2340      	movs	r3, #64	; 0x40
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f002 faff 	bl	8007272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c74:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <USBD_CDC_Init+0x1e8>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c90:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <USBD_CDC_Init+0x1ec>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3326      	adds	r3, #38	; 0x26
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004caa:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <USBD_CDC_Init+0x1ec>)
 8004cac:	7819      	ldrb	r1, [r3, #0]
 8004cae:	2308      	movs	r3, #8
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f002 fadd 	bl	8007272 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004cb8:	4b25      	ldr	r3, [pc, #148]	; (8004d50 <USBD_CDC_Init+0x1ec>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f003 020f 	and.w	r2, r3, #15
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3324      	adds	r3, #36	; 0x24
 8004cce:	2201      	movs	r2, #1
 8004cd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	33b0      	adds	r3, #176	; 0xb0
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e018      	b.n	8004d3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c1b      	ldrb	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <USBD_CDC_Init+0x1e8>)
 8004d16:	7819      	ldrb	r1, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f002 fb94 	bl	8007450 <USBD_LL_PrepareReceive>
 8004d28:	e008      	b.n	8004d3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <USBD_CDC_Init+0x1e8>)
 8004d2c:	7819      	ldrb	r1, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d34:	2340      	movs	r3, #64	; 0x40
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f002 fb8a 	bl	8007450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000093 	.word	0x20000093
 8004d4c:	20000094 	.word	0x20000094
 8004d50:	20000095 	.word	0x20000095

08004d54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004d60:	4b3a      	ldr	r3, [pc, #232]	; (8004e4c <USBD_CDC_DeInit+0xf8>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f002 faa9 	bl	80072be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004d6c:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <USBD_CDC_DeInit+0xf8>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 020f 	and.w	r2, r3, #15
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3324      	adds	r3, #36	; 0x24
 8004d82:	2200      	movs	r2, #0
 8004d84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004d86:	4b32      	ldr	r3, [pc, #200]	; (8004e50 <USBD_CDC_DeInit+0xfc>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f002 fa96 	bl	80072be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <USBD_CDC_DeInit+0xfc>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004daa:	2200      	movs	r2, #0
 8004dac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004dae:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <USBD_CDC_DeInit+0x100>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f002 fa82 	bl	80072be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004dba:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <USBD_CDC_DeInit+0x100>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	f003 020f 	and.w	r2, r3, #15
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3324      	adds	r3, #36	; 0x24
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <USBD_CDC_DeInit+0x100>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	f003 020f 	and.w	r2, r3, #15
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	3326      	adds	r3, #38	; 0x26
 8004dea:	2200      	movs	r2, #0
 8004dec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	32b0      	adds	r2, #176	; 0xb0
 8004df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01f      	beq.n	8004e40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	33b0      	adds	r3, #176	; 0xb0
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	32b0      	adds	r2, #176	; 0xb0
 8004e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f002 fb56 	bl	80074d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	32b0      	adds	r2, #176	; 0xb0
 8004e32:	2100      	movs	r1, #0
 8004e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000093 	.word	0x20000093
 8004e50:	20000094 	.word	0x20000094
 8004e54:	20000095 	.word	0x20000095

08004e58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	32b0      	adds	r2, #176	; 0xb0
 8004e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e0bf      	b.n	8005008 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d050      	beq.n	8004f36 <USBD_CDC_Setup+0xde>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	f040 80af 	bne.w	8004ff8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	88db      	ldrh	r3, [r3, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d03a      	beq.n	8004f18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da1b      	bge.n	8004ee4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	33b0      	adds	r3, #176	; 0xb0
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004ec2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	88d2      	ldrh	r2, [r2, #6]
 8004ec8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	88db      	ldrh	r3, [r3, #6]
 8004ece:	2b07      	cmp	r3, #7
 8004ed0:	bf28      	it	cs
 8004ed2:	2307      	movcs	r3, #7
 8004ed4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	89fa      	ldrh	r2, [r7, #14]
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 fd89 	bl	80069f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004ee2:	e090      	b.n	8005006 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	785a      	ldrb	r2, [r3, #1]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	88db      	ldrh	r3, [r3, #6]
 8004ef2:	2b3f      	cmp	r3, #63	; 0x3f
 8004ef4:	d803      	bhi.n	8004efe <USBD_CDC_Setup+0xa6>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	88db      	ldrh	r3, [r3, #6]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	e000      	b.n	8004f00 <USBD_CDC_Setup+0xa8>
 8004efe:	2240      	movs	r2, #64	; 0x40
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 fd9b 	bl	8006a4c <USBD_CtlPrepareRx>
      break;
 8004f16:	e076      	b.n	8005006 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	33b0      	adds	r3, #176	; 0xb0
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	7850      	ldrb	r0, [r2, #1]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	4798      	blx	r3
      break;
 8004f34:	e067      	b.n	8005006 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b0b      	cmp	r3, #11
 8004f3c:	d851      	bhi.n	8004fe2 <USBD_CDC_Setup+0x18a>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <USBD_CDC_Setup+0xec>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f75 	.word	0x08004f75
 8004f48:	08004ff1 	.word	0x08004ff1
 8004f4c:	08004fe3 	.word	0x08004fe3
 8004f50:	08004fe3 	.word	0x08004fe3
 8004f54:	08004fe3 	.word	0x08004fe3
 8004f58:	08004fe3 	.word	0x08004fe3
 8004f5c:	08004fe3 	.word	0x08004fe3
 8004f60:	08004fe3 	.word	0x08004fe3
 8004f64:	08004fe3 	.word	0x08004fe3
 8004f68:	08004fe3 	.word	0x08004fe3
 8004f6c:	08004f9f 	.word	0x08004f9f
 8004f70:	08004fc9 	.word	0x08004fc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d107      	bne.n	8004f90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f80:	f107 030a 	add.w	r3, r7, #10
 8004f84:	2202      	movs	r2, #2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f001 fd33 	bl	80069f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f8e:	e032      	b.n	8004ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 fcbd 	bl	8006912 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f9c:	e02b      	b.n	8004ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d107      	bne.n	8004fba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004faa:	f107 030d 	add.w	r3, r7, #13
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 fd1e 	bl	80069f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fb8:	e01d      	b.n	8004ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 fca8 	bl	8006912 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc6:	e016      	b.n	8004ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d00f      	beq.n	8004ff4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fc9b 	bl	8006912 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fe0:	e008      	b.n	8004ff4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 fc94 	bl	8006912 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fea:	2303      	movs	r3, #3
 8004fec:	75fb      	strb	r3, [r7, #23]
          break;
 8004fee:	e002      	b.n	8004ff6 <USBD_CDC_Setup+0x19e>
          break;
 8004ff0:	bf00      	nop
 8004ff2:	e008      	b.n	8005006 <USBD_CDC_Setup+0x1ae>
          break;
 8004ff4:	bf00      	nop
      }
      break;
 8004ff6:	e006      	b.n	8005006 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f001 fc89 	bl	8006912 <USBD_CtlError>
      ret = USBD_FAIL;
 8005000:	2303      	movs	r3, #3
 8005002:	75fb      	strb	r3, [r7, #23]
      break;
 8005004:	bf00      	nop
  }

  return (uint8_t)ret;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005022:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	32b0      	adds	r2, #176	; 0xb0
 800502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005036:	2303      	movs	r3, #3
 8005038:	e065      	b.n	8005106 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	32b0      	adds	r2, #176	; 0xb0
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	3318      	adds	r3, #24
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02f      	beq.n	80050c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	f003 020f 	and.w	r2, r3, #15
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	3318      	adds	r3, #24
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 010f 	and.w	r1, r3, #15
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	460b      	mov	r3, r1
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	440b      	add	r3, r1
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4403      	add	r3, r0
 800508c:	3348      	adds	r3, #72	; 0x48
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fbb2 f1f3 	udiv	r1, r2, r3
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800509a:	2b00      	cmp	r3, #0
 800509c:	d112      	bne.n	80050c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3318      	adds	r3, #24
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050b6:	78f9      	ldrb	r1, [r7, #3]
 80050b8:	2300      	movs	r3, #0
 80050ba:	2200      	movs	r2, #0
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f002 f9a6 	bl	800740e <USBD_LL_Transmit>
 80050c2:	e01f      	b.n	8005104 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	33b0      	adds	r3, #176	; 0xb0
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d010      	beq.n	8005104 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	33b0      	adds	r3, #176	; 0xb0
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	32b0      	adds	r2, #176	; 0xb0
 8005124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005128:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	32b0      	adds	r2, #176	; 0xb0
 8005134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800513c:	2303      	movs	r3, #3
 800513e:	e01a      	b.n	8005176 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f002 f9a4 	bl	8007492 <USBD_LL_GetRxDataSize>
 800514a:	4602      	mov	r2, r0
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	33b0      	adds	r3, #176	; 0xb0
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005170:	4611      	mov	r1, r2
 8005172:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	32b0      	adds	r2, #176	; 0xb0
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800519c:	2303      	movs	r3, #3
 800519e:	e025      	b.n	80051ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	33b0      	adds	r3, #176	; 0xb0
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01a      	beq.n	80051ea <USBD_CDC_EP0_RxReady+0x6c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051ba:	2bff      	cmp	r3, #255	; 0xff
 80051bc:	d015      	beq.n	80051ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	33b0      	adds	r3, #176	; 0xb0
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80051d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051de:	b292      	uxth	r2, r2
 80051e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	22ff      	movs	r2, #255	; 0xff
 80051e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051fc:	2182      	movs	r1, #130	; 0x82
 80051fe:	4818      	ldr	r0, [pc, #96]	; (8005260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005200:	f000 fd4f 	bl	8005ca2 <USBD_GetEpDesc>
 8005204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005206:	2101      	movs	r1, #1
 8005208:	4815      	ldr	r0, [pc, #84]	; (8005260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800520a:	f000 fd4a 	bl	8005ca2 <USBD_GetEpDesc>
 800520e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005210:	2181      	movs	r1, #129	; 0x81
 8005212:	4813      	ldr	r0, [pc, #76]	; (8005260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005214:	f000 fd45 	bl	8005ca2 <USBD_GetEpDesc>
 8005218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2210      	movs	r2, #16
 8005224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2200      	movs	r2, #0
 8005230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005234:	711a      	strb	r2, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005248:	711a      	strb	r2, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2243      	movs	r2, #67	; 0x43
 8005252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005254:	4b02      	ldr	r3, [pc, #8]	; (8005260 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000050 	.word	0x20000050

08005264 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800526c:	2182      	movs	r1, #130	; 0x82
 800526e:	4818      	ldr	r0, [pc, #96]	; (80052d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005270:	f000 fd17 	bl	8005ca2 <USBD_GetEpDesc>
 8005274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005276:	2101      	movs	r1, #1
 8005278:	4815      	ldr	r0, [pc, #84]	; (80052d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800527a:	f000 fd12 	bl	8005ca2 <USBD_GetEpDesc>
 800527e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005280:	2181      	movs	r1, #129	; 0x81
 8005282:	4813      	ldr	r0, [pc, #76]	; (80052d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005284:	f000 fd0d 	bl	8005ca2 <USBD_GetEpDesc>
 8005288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2210      	movs	r2, #16
 8005294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2200      	movs	r2, #0
 80052a0:	711a      	strb	r2, [r3, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f042 0202 	orr.w	r2, r2, #2
 80052a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d006      	beq.n	80052be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	711a      	strb	r2, [r3, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f042 0202 	orr.w	r2, r2, #2
 80052bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2243      	movs	r2, #67	; 0x43
 80052c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052c4:	4b02      	ldr	r3, [pc, #8]	; (80052d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000050 	.word	0x20000050

080052d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052dc:	2182      	movs	r1, #130	; 0x82
 80052de:	4818      	ldr	r0, [pc, #96]	; (8005340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052e0:	f000 fcdf 	bl	8005ca2 <USBD_GetEpDesc>
 80052e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052e6:	2101      	movs	r1, #1
 80052e8:	4815      	ldr	r0, [pc, #84]	; (8005340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052ea:	f000 fcda 	bl	8005ca2 <USBD_GetEpDesc>
 80052ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052f0:	2181      	movs	r1, #129	; 0x81
 80052f2:	4813      	ldr	r0, [pc, #76]	; (8005340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052f4:	f000 fcd5 	bl	8005ca2 <USBD_GetEpDesc>
 80052f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2210      	movs	r2, #16
 8005304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d006      	beq.n	800531a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2200      	movs	r2, #0
 8005310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005314:	711a      	strb	r2, [r3, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005328:	711a      	strb	r2, [r3, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2243      	movs	r2, #67	; 0x43
 8005332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005334:	4b02      	ldr	r3, [pc, #8]	; (8005340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000050 	.word	0x20000050

08005344 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	220a      	movs	r2, #10
 8005350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005352:	4b03      	ldr	r3, [pc, #12]	; (8005360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	2000000c 	.word	0x2000000c

08005364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005374:	2303      	movs	r3, #3
 8005376:	e009      	b.n	800538c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	33b0      	adds	r3, #176	; 0xb0
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	32b0      	adds	r2, #176	; 0xb0
 80053ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e008      	b.n	80053d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	32b0      	adds	r2, #176	; 0xb0
 80053f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e004      	b.n	800540a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	32b0      	adds	r2, #176	; 0xb0
 800542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	32b0      	adds	r2, #176	; 0xb0
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005446:	2303      	movs	r3, #3
 8005448:	e025      	b.n	8005496 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11f      	bne.n	8005494 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2201      	movs	r2, #1
 8005458:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800545c:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <USBD_CDC_TransmitPacket+0x88>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4403      	add	r3, r0
 8005476:	3318      	adds	r3, #24
 8005478:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <USBD_CDC_TransmitPacket+0x88>)
 800547c:	7819      	ldrb	r1, [r3, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 ffbf 	bl	800740e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000093 	.word	0x20000093

080054a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	32b0      	adds	r2, #176	; 0xb0
 80054b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	32b0      	adds	r2, #176	; 0xb0
 80054c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e018      	b.n	8005504 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	7c1b      	ldrb	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054da:	4b0c      	ldr	r3, [pc, #48]	; (800550c <USBD_CDC_ReceivePacket+0x68>)
 80054dc:	7819      	ldrb	r1, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 ffb1 	bl	8007450 <USBD_LL_PrepareReceive>
 80054ee:	e008      	b.n	8005502 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <USBD_CDC_ReceivePacket+0x68>)
 80054f2:	7819      	ldrb	r1, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054fa:	2340      	movs	r3, #64	; 0x40
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 ffa7 	bl	8007450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000094 	.word	0x20000094

08005510 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005524:	2303      	movs	r3, #3
 8005526:	e01f      	b.n	8005568 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	79fa      	ldrb	r2, [r7, #7]
 800555a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f001 fe21 	bl	80071a4 <USBD_LL_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	e025      	b.n	80055d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	32ae      	adds	r2, #174	; 0xae
 800559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00f      	beq.n	80055c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	32ae      	adds	r2, #174	; 0xae
 80055ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	f107 020e 	add.w	r2, r7, #14
 80055b8:	4610      	mov	r0, r2
 80055ba:	4798      	blx	r3
 80055bc:	4602      	mov	r2, r0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 fe29 	bl	800723c <USBD_LL_Start>
 80055ea:	4603      	mov	r3, r0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005620:	2b00      	cmp	r3, #0
 8005622:	d009      	beq.n	8005638 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	4611      	mov	r1, r2
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	4611      	mov	r1, r2
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005668:	2303      	movs	r3, #3
 800566a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f001 f908 	bl	800689e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800569c:	461a      	mov	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d01a      	beq.n	80056e8 <USBD_LL_SetupStage+0x72>
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d822      	bhi.n	80056fc <USBD_LL_SetupStage+0x86>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <USBD_LL_SetupStage+0x4a>
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d00a      	beq.n	80056d4 <USBD_LL_SetupStage+0x5e>
 80056be:	e01d      	b.n	80056fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fb5f 	bl	8005d8c <USBD_StdDevReq>
 80056ce:	4603      	mov	r3, r0
 80056d0:	73fb      	strb	r3, [r7, #15]
      break;
 80056d2:	e020      	b.n	8005716 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fbc7 	bl	8005e70 <USBD_StdItfReq>
 80056e2:	4603      	mov	r3, r0
 80056e4:	73fb      	strb	r3, [r7, #15]
      break;
 80056e6:	e016      	b.n	8005716 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fc29 	bl	8005f48 <USBD_StdEPReq>
 80056f6:	4603      	mov	r3, r0
 80056f8:	73fb      	strb	r3, [r7, #15]
      break;
 80056fa:	e00c      	b.n	8005716 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fdf6 	bl	80072fc <USBD_LL_StallEP>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]
      break;
 8005714:	bf00      	nop
  }

  return ret;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	460b      	mov	r3, r1
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005732:	7afb      	ldrb	r3, [r7, #11]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d16e      	bne.n	8005816 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800573e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005746:	2b03      	cmp	r3, #3
 8005748:	f040 8098 	bne.w	800587c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	429a      	cmp	r2, r3
 8005756:	d913      	bls.n	8005780 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	4293      	cmp	r3, r2
 8005770:	bf28      	it	cs
 8005772:	4613      	movcs	r3, r2
 8005774:	461a      	mov	r2, r3
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f001 f984 	bl	8006a86 <USBD_CtlContinueRx>
 800577e:	e07d      	b.n	800587c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2b02      	cmp	r3, #2
 800578c:	d014      	beq.n	80057b8 <USBD_LL_DataOutStage+0x98>
 800578e:	2b02      	cmp	r3, #2
 8005790:	d81d      	bhi.n	80057ce <USBD_LL_DataOutStage+0xae>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <USBD_LL_DataOutStage+0x7c>
 8005796:	2b01      	cmp	r3, #1
 8005798:	d003      	beq.n	80057a2 <USBD_LL_DataOutStage+0x82>
 800579a:	e018      	b.n	80057ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	75bb      	strb	r3, [r7, #22]
            break;
 80057a0:	e018      	b.n	80057d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	4619      	mov	r1, r3
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fa5e 	bl	8005c6e <USBD_CoreFindIF>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75bb      	strb	r3, [r7, #22]
            break;
 80057b6:	e00d      	b.n	80057d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fa60 	bl	8005c88 <USBD_CoreFindEP>
 80057c8:	4603      	mov	r3, r0
 80057ca:	75bb      	strb	r3, [r7, #22]
            break;
 80057cc:	e002      	b.n	80057d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75bb      	strb	r3, [r7, #22]
            break;
 80057d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057d4:	7dbb      	ldrb	r3, [r7, #22]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d119      	bne.n	800580e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d113      	bne.n	800580e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057e6:	7dba      	ldrb	r2, [r7, #22]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	32ae      	adds	r2, #174	; 0xae
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057f6:	7dba      	ldrb	r2, [r7, #22]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057fe:	7dba      	ldrb	r2, [r7, #22]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	32ae      	adds	r2, #174	; 0xae
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f001 f94a 	bl	8006aa8 <USBD_CtlSendStatus>
 8005814:	e032      	b.n	800587c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800581c:	b2db      	uxtb	r3, r3
 800581e:	4619      	mov	r1, r3
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fa31 	bl	8005c88 <USBD_CoreFindEP>
 8005826:	4603      	mov	r3, r0
 8005828:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800582a:	7dbb      	ldrb	r3, [r7, #22]
 800582c:	2bff      	cmp	r3, #255	; 0xff
 800582e:	d025      	beq.n	800587c <USBD_LL_DataOutStage+0x15c>
 8005830:	7dbb      	ldrb	r3, [r7, #22]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d122      	bne.n	800587c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d117      	bne.n	8005872 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005842:	7dba      	ldrb	r2, [r7, #22]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	32ae      	adds	r2, #174	; 0xae
 8005848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00f      	beq.n	8005872 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005852:	7dba      	ldrb	r2, [r7, #22]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800585a:	7dba      	ldrb	r2, [r7, #22]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	32ae      	adds	r2, #174	; 0xae
 8005860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	7afa      	ldrb	r2, [r7, #11]
 8005868:	4611      	mov	r1, r2
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	4798      	blx	r3
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	e000      	b.n	800587e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	460b      	mov	r3, r1
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005894:	7afb      	ldrb	r3, [r7, #11]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d16f      	bne.n	800597a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3314      	adds	r3, #20
 800589e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d15a      	bne.n	8005960 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d914      	bls.n	80058e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	461a      	mov	r2, r3
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f001 f8ac 	bl	8006a2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058d2:	2300      	movs	r3, #0
 80058d4:	2200      	movs	r2, #0
 80058d6:	2100      	movs	r1, #0
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f001 fdb9 	bl	8007450 <USBD_LL_PrepareReceive>
 80058de:	e03f      	b.n	8005960 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d11c      	bne.n	8005926 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d316      	bcc.n	8005926 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005902:	429a      	cmp	r2, r3
 8005904:	d20f      	bcs.n	8005926 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f001 f88d 	bl	8006a2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005918:	2300      	movs	r3, #0
 800591a:	2200      	movs	r2, #0
 800591c:	2100      	movs	r1, #0
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f001 fd96 	bl	8007450 <USBD_LL_PrepareReceive>
 8005924:	e01c      	b.n	8005960 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d10f      	bne.n	8005952 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f001 fcd1 	bl	80072fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f001 f8b7 	bl	8006ace <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d03a      	beq.n	80059e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff fe42 	bl	80055f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005978:	e032      	b.n	80059e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800597a:	7afb      	ldrb	r3, [r7, #11]
 800597c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005980:	b2db      	uxtb	r3, r3
 8005982:	4619      	mov	r1, r3
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f97f 	bl	8005c88 <USBD_CoreFindEP>
 800598a:	4603      	mov	r3, r0
 800598c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2bff      	cmp	r3, #255	; 0xff
 8005992:	d025      	beq.n	80059e0 <USBD_LL_DataInStage+0x15a>
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d122      	bne.n	80059e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d11c      	bne.n	80059e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059a6:	7dfa      	ldrb	r2, [r7, #23]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	32ae      	adds	r2, #174	; 0xae
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d014      	beq.n	80059e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059b6:	7dfa      	ldrb	r2, [r7, #23]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059be:	7dfa      	ldrb	r2, [r7, #23]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	32ae      	adds	r2, #174	; 0xae
 80059c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	7afa      	ldrb	r2, [r7, #11]
 80059cc:	4611      	mov	r1, r2
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	4798      	blx	r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059d6:	7dbb      	ldrb	r3, [r7, #22]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059dc:	7dbb      	ldrb	r3, [r7, #22]
 80059de:	e000      	b.n	80059e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d014      	beq.n	8005a50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6852      	ldr	r2, [r2, #4]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	4611      	mov	r1, r2
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a50:	2340      	movs	r3, #64	; 0x40
 8005a52:	2200      	movs	r2, #0
 8005a54:	2100      	movs	r1, #0
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fc0b 	bl	8007272 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2240      	movs	r2, #64	; 0x40
 8005a68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a6c:	2340      	movs	r3, #64	; 0x40
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2180      	movs	r1, #128	; 0x80
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fbfd 	bl	8007272 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2240      	movs	r2, #64	; 0x40
 8005a82:	621a      	str	r2, [r3, #32]

  return ret;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	78fa      	ldrb	r2, [r7, #3]
 8005a9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d106      	bne.n	8005afc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d110      	bne.n	8005b40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	32ae      	adds	r2, #174	; 0xae
 8005b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e01c      	b.n	8005ba6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d115      	bne.n	8005ba4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	32ae      	adds	r2, #174	; 0xae
 8005b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	32ae      	adds	r2, #174	; 0xae
 8005b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	78fa      	ldrb	r2, [r7, #3]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	32ae      	adds	r2, #174	; 0xae
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e01c      	b.n	8005c0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d115      	bne.n	8005c08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	32ae      	adds	r2, #174	; 0xae
 8005be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	32ae      	adds	r2, #174	; 0xae
 8005bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	4611      	mov	r1, r2
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00e      	beq.n	8005c64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6852      	ldr	r2, [r2, #4]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	4611      	mov	r1, r2
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c60:	2303      	movs	r3, #3
 8005c62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	885b      	ldrh	r3, [r3, #2]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d920      	bls.n	8005d0c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005cd2:	e013      	b.n	8005cfc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005cd4:	f107 030a 	add.w	r3, r7, #10
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6978      	ldr	r0, [r7, #20]
 8005cdc:	f000 f81b 	bl	8005d16 <USBD_GetNextDesc>
 8005ce0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d108      	bne.n	8005cfc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	789b      	ldrb	r3, [r3, #2]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d008      	beq.n	8005d0a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	885b      	ldrh	r3, [r3, #2]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	897b      	ldrh	r3, [r7, #10]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d8e5      	bhi.n	8005cd4 <USBD_GetEpDesc+0x32>
 8005d08:	e000      	b.n	8005d0c <USBD_GetEpDesc+0x6a>
          break;
 8005d0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d0c:	693b      	ldr	r3, [r7, #16]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	881a      	ldrh	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4413      	add	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d42:	68fb      	ldr	r3, [r7, #12]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	3301      	adds	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d6e:	8a3b      	ldrh	r3, [r7, #16]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	b21a      	sxth	r2, r3
 8005d74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	b21b      	sxth	r3, r3
 8005d7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d005      	beq.n	8005db2 <USBD_StdDevReq+0x26>
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d857      	bhi.n	8005e5a <USBD_StdDevReq+0xce>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00f      	beq.n	8005dce <USBD_StdDevReq+0x42>
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d153      	bne.n	8005e5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	32ae      	adds	r2, #174	; 0xae
 8005dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]
      break;
 8005dcc:	e04a      	b.n	8005e64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	2b09      	cmp	r3, #9
 8005dd4:	d83b      	bhi.n	8005e4e <USBD_StdDevReq+0xc2>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <USBD_StdDevReq+0x50>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005e45 	.word	0x08005e45
 8005de4:	08005e4f 	.word	0x08005e4f
 8005de8:	08005e3b 	.word	0x08005e3b
 8005dec:	08005e4f 	.word	0x08005e4f
 8005df0:	08005e0f 	.word	0x08005e0f
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e4f 	.word	0x08005e4f
 8005dfc:	08005e27 	.word	0x08005e27
 8005e00:	08005e19 	.word	0x08005e19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa3c 	bl	8006284 <USBD_GetDescriptor>
          break;
 8005e0c:	e024      	b.n	8005e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fba1 	bl	8006558 <USBD_SetAddress>
          break;
 8005e16:	e01f      	b.n	8005e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fbe0 	bl	80065e0 <USBD_SetConfig>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]
          break;
 8005e24:	e018      	b.n	8005e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fc83 	bl	8006734 <USBD_GetConfig>
          break;
 8005e2e:	e013      	b.n	8005e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fcb4 	bl	80067a0 <USBD_GetStatus>
          break;
 8005e38:	e00e      	b.n	8005e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fce3 	bl	8006808 <USBD_SetFeature>
          break;
 8005e42:	e009      	b.n	8005e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fd07 	bl	800685a <USBD_ClrFeature>
          break;
 8005e4c:	e004      	b.n	8005e58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fd5e 	bl	8006912 <USBD_CtlError>
          break;
 8005e56:	bf00      	nop
      }
      break;
 8005e58:	e004      	b.n	8005e64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fd58 	bl	8006912 <USBD_CtlError>
      break;
 8005e62:	bf00      	nop
  }

  return ret;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d005      	beq.n	8005e96 <USBD_StdItfReq+0x26>
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	d852      	bhi.n	8005f34 <USBD_StdItfReq+0xc4>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <USBD_StdItfReq+0x26>
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d14e      	bne.n	8005f34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d840      	bhi.n	8005f26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	889b      	ldrh	r3, [r3, #4]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d836      	bhi.n	8005f1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	889b      	ldrh	r3, [r3, #4]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fed9 	bl	8005c6e <USBD_CoreFindIF>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	2bff      	cmp	r3, #255	; 0xff
 8005ec4:	d01d      	beq.n	8005f02 <USBD_StdItfReq+0x92>
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11a      	bne.n	8005f02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ecc:	7bba      	ldrb	r2, [r7, #14]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32ae      	adds	r2, #174	; 0xae
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00f      	beq.n	8005efc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005edc:	7bba      	ldrb	r2, [r7, #14]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ee4:	7bba      	ldrb	r2, [r7, #14]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	32ae      	adds	r2, #174	; 0xae
 8005eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005efa:	e004      	b.n	8005f06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005efc:	2303      	movs	r3, #3
 8005efe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f00:	e001      	b.n	8005f06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f02:	2303      	movs	r3, #3
 8005f04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	88db      	ldrh	r3, [r3, #6]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d110      	bne.n	8005f30 <USBD_StdItfReq+0xc0>
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fdc7 	bl	8006aa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f1a:	e009      	b.n	8005f30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fcf7 	bl	8006912 <USBD_CtlError>
          break;
 8005f24:	e004      	b.n	8005f30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fcf2 	bl	8006912 <USBD_CtlError>
          break;
 8005f2e:	e000      	b.n	8005f32 <USBD_StdItfReq+0xc2>
          break;
 8005f30:	bf00      	nop
      }
      break;
 8005f32:	e004      	b.n	8005f3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fceb 	bl	8006912 <USBD_CtlError>
      break;
 8005f3c:	bf00      	nop
  }

  return ret;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	889b      	ldrh	r3, [r3, #4]
 8005f5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d007      	beq.n	8005f78 <USBD_StdEPReq+0x30>
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	f200 817f 	bhi.w	800626c <USBD_StdEPReq+0x324>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02a      	beq.n	8005fc8 <USBD_StdEPReq+0x80>
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	f040 817a 	bne.w	800626c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fe83 	bl	8005c88 <USBD_CoreFindEP>
 8005f82:	4603      	mov	r3, r0
 8005f84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f86:	7b7b      	ldrb	r3, [r7, #13]
 8005f88:	2bff      	cmp	r3, #255	; 0xff
 8005f8a:	f000 8174 	beq.w	8006276 <USBD_StdEPReq+0x32e>
 8005f8e:	7b7b      	ldrb	r3, [r7, #13]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8170 	bne.w	8006276 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f96:	7b7a      	ldrb	r2, [r7, #13]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f9e:	7b7a      	ldrb	r2, [r7, #13]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	32ae      	adds	r2, #174	; 0xae
 8005fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8163 	beq.w	8006276 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005fb0:	7b7a      	ldrb	r2, [r7, #13]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	32ae      	adds	r2, #174	; 0xae
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fc6:	e156      	b.n	8006276 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d008      	beq.n	8005fe2 <USBD_StdEPReq+0x9a>
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	f300 8145 	bgt.w	8006260 <USBD_StdEPReq+0x318>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 809b 	beq.w	8006112 <USBD_StdEPReq+0x1ca>
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d03c      	beq.n	800605a <USBD_StdEPReq+0x112>
 8005fe0:	e13e      	b.n	8006260 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d002      	beq.n	8005ff4 <USBD_StdEPReq+0xac>
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d016      	beq.n	8006020 <USBD_StdEPReq+0xd8>
 8005ff2:	e02c      	b.n	800604e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00d      	beq.n	8006016 <USBD_StdEPReq+0xce>
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d00a      	beq.n	8006016 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f979 	bl	80072fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800600a:	2180      	movs	r1, #128	; 0x80
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f975 	bl	80072fc <USBD_LL_StallEP>
 8006012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006014:	e020      	b.n	8006058 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fc7a 	bl	8006912 <USBD_CtlError>
              break;
 800601e:	e01b      	b.n	8006058 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	885b      	ldrh	r3, [r3, #2]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10e      	bne.n	8006046 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <USBD_StdEPReq+0xfe>
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d008      	beq.n	8006046 <USBD_StdEPReq+0xfe>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	88db      	ldrh	r3, [r3, #6]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f95b 	bl	80072fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fd2e 	bl	8006aa8 <USBD_CtlSendStatus>

              break;
 800604c:	e004      	b.n	8006058 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fc5e 	bl	8006912 <USBD_CtlError>
              break;
 8006056:	bf00      	nop
          }
          break;
 8006058:	e107      	b.n	800626a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d002      	beq.n	800606c <USBD_StdEPReq+0x124>
 8006066:	2b03      	cmp	r3, #3
 8006068:	d016      	beq.n	8006098 <USBD_StdEPReq+0x150>
 800606a:	e04b      	b.n	8006104 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00d      	beq.n	800608e <USBD_StdEPReq+0x146>
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d00a      	beq.n	800608e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 f93d 	bl	80072fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006082:	2180      	movs	r1, #128	; 0x80
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f939 	bl	80072fc <USBD_LL_StallEP>
 800608a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800608c:	e040      	b.n	8006110 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fc3e 	bl	8006912 <USBD_CtlError>
              break;
 8006096:	e03b      	b.n	8006110 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	885b      	ldrh	r3, [r3, #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d136      	bne.n	800610e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 f943 	bl	800733a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fcf7 	bl	8006aa8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fde2 	bl	8005c88 <USBD_CoreFindEP>
 80060c4:	4603      	mov	r3, r0
 80060c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060c8:	7b7b      	ldrb	r3, [r7, #13]
 80060ca:	2bff      	cmp	r3, #255	; 0xff
 80060cc:	d01f      	beq.n	800610e <USBD_StdEPReq+0x1c6>
 80060ce:	7b7b      	ldrb	r3, [r7, #13]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d11c      	bne.n	800610e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80060d4:	7b7a      	ldrb	r2, [r7, #13]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060dc:	7b7a      	ldrb	r2, [r7, #13]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	32ae      	adds	r2, #174	; 0xae
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060ec:	7b7a      	ldrb	r2, [r7, #13]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	32ae      	adds	r2, #174	; 0xae
 80060f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006102:	e004      	b.n	800610e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fc03 	bl	8006912 <USBD_CtlError>
              break;
 800610c:	e000      	b.n	8006110 <USBD_StdEPReq+0x1c8>
              break;
 800610e:	bf00      	nop
          }
          break;
 8006110:	e0ab      	b.n	800626a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d002      	beq.n	8006124 <USBD_StdEPReq+0x1dc>
 800611e:	2b03      	cmp	r3, #3
 8006120:	d032      	beq.n	8006188 <USBD_StdEPReq+0x240>
 8006122:	e097      	b.n	8006254 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <USBD_StdEPReq+0x1f2>
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d004      	beq.n	800613a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fbed 	bl	8006912 <USBD_CtlError>
                break;
 8006138:	e091      	b.n	800625e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800613a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	da0b      	bge.n	800615a <USBD_StdEPReq+0x212>
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	3310      	adds	r3, #16
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	3304      	adds	r3, #4
 8006158:	e00b      	b.n	8006172 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	4413      	add	r3, r2
 8006170:	3304      	adds	r3, #4
 8006172:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2202      	movs	r2, #2
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fc37 	bl	80069f4 <USBD_CtlSendData>
              break;
 8006186:	e06a      	b.n	800625e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800618c:	2b00      	cmp	r3, #0
 800618e:	da11      	bge.n	80061b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	f003 020f 	and.w	r2, r3, #15
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d117      	bne.n	80061da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fbb0 	bl	8006912 <USBD_CtlError>
                  break;
 80061b2:	e054      	b.n	800625e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fb9d 	bl	8006912 <USBD_CtlError>
                  break;
 80061d8:	e041      	b.n	800625e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da0b      	bge.n	80061fa <USBD_StdEPReq+0x2b2>
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	3310      	adds	r3, #16
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	3304      	adds	r3, #4
 80061f8:	e00b      	b.n	8006212 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	4413      	add	r3, r2
 8006210:	3304      	adds	r3, #4
 8006212:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <USBD_StdEPReq+0x2d8>
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b80      	cmp	r3, #128	; 0x80
 800621e:	d103      	bne.n	8006228 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e00e      	b.n	8006246 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 f8a3 	bl	8007378 <USBD_LL_IsStallEP>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e002      	b.n	8006246 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2202      	movs	r2, #2
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fbd1 	bl	80069f4 <USBD_CtlSendData>
              break;
 8006252:	e004      	b.n	800625e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fb5b 	bl	8006912 <USBD_CtlError>
              break;
 800625c:	bf00      	nop
          }
          break;
 800625e:	e004      	b.n	800626a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb55 	bl	8006912 <USBD_CtlError>
          break;
 8006268:	bf00      	nop
      }
      break;
 800626a:	e005      	b.n	8006278 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fb4f 	bl	8006912 <USBD_CtlError>
      break;
 8006274:	e000      	b.n	8006278 <USBD_StdEPReq+0x330>
      break;
 8006276:	bf00      	nop
  }

  return ret;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	885b      	ldrh	r3, [r3, #2]
 800629e:	0a1b      	lsrs	r3, r3, #8
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	f200 8128 	bhi.w	80064fa <USBD_GetDescriptor+0x276>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <USBD_GetDescriptor+0x2c>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062cd 	.word	0x080062cd
 80062b4:	080062e5 	.word	0x080062e5
 80062b8:	08006325 	.word	0x08006325
 80062bc:	080064fb 	.word	0x080064fb
 80062c0:	080064fb 	.word	0x080064fb
 80062c4:	0800649b 	.word	0x0800649b
 80062c8:	080064c7 	.word	0x080064c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	7c12      	ldrb	r2, [r2, #16]
 80062d8:	f107 0108 	add.w	r1, r7, #8
 80062dc:	4610      	mov	r0, r2
 80062de:	4798      	blx	r3
 80062e0:	60f8      	str	r0, [r7, #12]
      break;
 80062e2:	e112      	b.n	800650a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7c1b      	ldrb	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10d      	bne.n	8006308 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	f107 0208 	add.w	r2, r7, #8
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
 80062fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3301      	adds	r3, #1
 8006302:	2202      	movs	r2, #2
 8006304:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006306:	e100      	b.n	800650a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	f107 0208 	add.w	r2, r7, #8
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	2202      	movs	r2, #2
 8006320:	701a      	strb	r2, [r3, #0]
      break;
 8006322:	e0f2      	b.n	800650a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b05      	cmp	r3, #5
 800632c:	f200 80ac 	bhi.w	8006488 <USBD_GetDescriptor+0x204>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <USBD_GetDescriptor+0xb4>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	08006351 	.word	0x08006351
 800633c:	08006385 	.word	0x08006385
 8006340:	080063b9 	.word	0x080063b9
 8006344:	080063ed 	.word	0x080063ed
 8006348:	08006421 	.word	0x08006421
 800634c:	08006455 	.word	0x08006455
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	7c12      	ldrb	r2, [r2, #16]
 8006368:	f107 0108 	add.w	r1, r7, #8
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
 8006370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006372:	e091      	b.n	8006498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 facb 	bl	8006912 <USBD_CtlError>
            err++;
 800637c:	7afb      	ldrb	r3, [r7, #11]
 800637e:	3301      	adds	r3, #1
 8006380:	72fb      	strb	r3, [r7, #11]
          break;
 8006382:	e089      	b.n	8006498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	7c12      	ldrb	r2, [r2, #16]
 800639c:	f107 0108 	add.w	r1, r7, #8
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
 80063a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063a6:	e077      	b.n	8006498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fab1 	bl	8006912 <USBD_CtlError>
            err++;
 80063b0:	7afb      	ldrb	r3, [r7, #11]
 80063b2:	3301      	adds	r3, #1
 80063b4:	72fb      	strb	r3, [r7, #11]
          break;
 80063b6:	e06f      	b.n	8006498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	7c12      	ldrb	r2, [r2, #16]
 80063d0:	f107 0108 	add.w	r1, r7, #8
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
 80063d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063da:	e05d      	b.n	8006498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa97 	bl	8006912 <USBD_CtlError>
            err++;
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	3301      	adds	r3, #1
 80063e8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ea:	e055      	b.n	8006498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	7c12      	ldrb	r2, [r2, #16]
 8006404:	f107 0108 	add.w	r1, r7, #8
 8006408:	4610      	mov	r0, r2
 800640a:	4798      	blx	r3
 800640c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800640e:	e043      	b.n	8006498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa7d 	bl	8006912 <USBD_CtlError>
            err++;
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	3301      	adds	r3, #1
 800641c:	72fb      	strb	r3, [r7, #11]
          break;
 800641e:	e03b      	b.n	8006498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	7c12      	ldrb	r2, [r2, #16]
 8006438:	f107 0108 	add.w	r1, r7, #8
 800643c:	4610      	mov	r0, r2
 800643e:	4798      	blx	r3
 8006440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006442:	e029      	b.n	8006498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa63 	bl	8006912 <USBD_CtlError>
            err++;
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	3301      	adds	r3, #1
 8006450:	72fb      	strb	r3, [r7, #11]
          break;
 8006452:	e021      	b.n	8006498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	7c12      	ldrb	r2, [r2, #16]
 800646c:	f107 0108 	add.w	r1, r7, #8
 8006470:	4610      	mov	r0, r2
 8006472:	4798      	blx	r3
 8006474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006476:	e00f      	b.n	8006498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa49 	bl	8006912 <USBD_CtlError>
            err++;
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	3301      	adds	r3, #1
 8006484:	72fb      	strb	r3, [r7, #11]
          break;
 8006486:	e007      	b.n	8006498 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa41 	bl	8006912 <USBD_CtlError>
          err++;
 8006490:	7afb      	ldrb	r3, [r7, #11]
 8006492:	3301      	adds	r3, #1
 8006494:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006496:	bf00      	nop
      }
      break;
 8006498:	e037      	b.n	800650a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7c1b      	ldrb	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064aa:	f107 0208 	add.w	r2, r7, #8
 80064ae:	4610      	mov	r0, r2
 80064b0:	4798      	blx	r3
 80064b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064b4:	e029      	b.n	800650a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fa2a 	bl	8006912 <USBD_CtlError>
        err++;
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	3301      	adds	r3, #1
 80064c2:	72fb      	strb	r3, [r7, #11]
      break;
 80064c4:	e021      	b.n	800650a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7c1b      	ldrb	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10d      	bne.n	80064ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	f107 0208 	add.w	r2, r7, #8
 80064da:	4610      	mov	r0, r2
 80064dc:	4798      	blx	r3
 80064de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	2207      	movs	r2, #7
 80064e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064e8:	e00f      	b.n	800650a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fa10 	bl	8006912 <USBD_CtlError>
        err++;
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	3301      	adds	r3, #1
 80064f6:	72fb      	strb	r3, [r7, #11]
      break;
 80064f8:	e007      	b.n	800650a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa08 	bl	8006912 <USBD_CtlError>
      err++;
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	3301      	adds	r3, #1
 8006506:	72fb      	strb	r3, [r7, #11]
      break;
 8006508:	bf00      	nop
  }

  if (err != 0U)
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11e      	bne.n	800654e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	88db      	ldrh	r3, [r3, #6]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d016      	beq.n	8006546 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006518:	893b      	ldrh	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	88da      	ldrh	r2, [r3, #6]
 8006522:	893b      	ldrh	r3, [r7, #8]
 8006524:	4293      	cmp	r3, r2
 8006526:	bf28      	it	cs
 8006528:	4613      	movcs	r3, r2
 800652a:	b29b      	uxth	r3, r3
 800652c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800652e:	893b      	ldrh	r3, [r7, #8]
 8006530:	461a      	mov	r2, r3
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa5d 	bl	80069f4 <USBD_CtlSendData>
 800653a:	e009      	b.n	8006550 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9e7 	bl	8006912 <USBD_CtlError>
 8006544:	e004      	b.n	8006550 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 faae 	bl	8006aa8 <USBD_CtlSendStatus>
 800654c:	e000      	b.n	8006550 <USBD_GetDescriptor+0x2cc>
    return;
 800654e:	bf00      	nop
  }
}
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	889b      	ldrh	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d131      	bne.n	80065ce <USBD_SetAddress+0x76>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	88db      	ldrh	r3, [r3, #6]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d12d      	bne.n	80065ce <USBD_SetAddress+0x76>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	2b7f      	cmp	r3, #127	; 0x7f
 8006578:	d829      	bhi.n	80065ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	885b      	ldrh	r3, [r3, #2]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006584:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b03      	cmp	r3, #3
 8006590:	d104      	bne.n	800659c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f9bc 	bl	8006912 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659a:	e01d      	b.n	80065d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7bfa      	ldrb	r2, [r7, #15]
 80065a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 ff11 	bl	80073d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa7a 	bl	8006aa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c2:	e009      	b.n	80065d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065cc:	e004      	b.n	80065d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f99e 	bl	8006912 <USBD_CtlError>
  }
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	885b      	ldrh	r3, [r3, #2]
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	4b4e      	ldr	r3, [pc, #312]	; (8006730 <USBD_SetConfig+0x150>)
 80065f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065f8:	4b4d      	ldr	r3, [pc, #308]	; (8006730 <USBD_SetConfig+0x150>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d905      	bls.n	800660c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f985 	bl	8006912 <USBD_CtlError>
    return USBD_FAIL;
 8006608:	2303      	movs	r3, #3
 800660a:	e08c      	b.n	8006726 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d002      	beq.n	800661e <USBD_SetConfig+0x3e>
 8006618:	2b03      	cmp	r3, #3
 800661a:	d029      	beq.n	8006670 <USBD_SetConfig+0x90>
 800661c:	e075      	b.n	800670a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800661e:	4b44      	ldr	r3, [pc, #272]	; (8006730 <USBD_SetConfig+0x150>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d020      	beq.n	8006668 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006626:	4b42      	ldr	r3, [pc, #264]	; (8006730 <USBD_SetConfig+0x150>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006630:	4b3f      	ldr	r3, [pc, #252]	; (8006730 <USBD_SetConfig+0x150>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fe ffe7 	bl	800560a <USBD_SetClassConfig>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f962 	bl	8006912 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006656:	e065      	b.n	8006724 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fa25 	bl	8006aa8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2203      	movs	r2, #3
 8006662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006666:	e05d      	b.n	8006724 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa1d 	bl	8006aa8 <USBD_CtlSendStatus>
      break;
 800666e:	e059      	b.n	8006724 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006670:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <USBD_SetConfig+0x150>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d112      	bne.n	800669e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006680:	4b2b      	ldr	r3, [pc, #172]	; (8006730 <USBD_SetConfig+0x150>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800668a:	4b29      	ldr	r3, [pc, #164]	; (8006730 <USBD_SetConfig+0x150>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7fe ffd6 	bl	8005642 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa06 	bl	8006aa8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800669c:	e042      	b.n	8006724 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <USBD_SetConfig+0x150>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d02a      	beq.n	8006702 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fe ffc4 	bl	8005642 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066ba:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <USBD_SetConfig+0x150>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066c4:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <USBD_SetConfig+0x150>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fe ff9d 	bl	800560a <USBD_SetClassConfig>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00f      	beq.n	80066fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f918 	bl	8006912 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fe ffa9 	bl	8005642 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066f8:	e014      	b.n	8006724 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f9d4 	bl	8006aa8 <USBD_CtlSendStatus>
      break;
 8006700:	e010      	b.n	8006724 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9d0 	bl	8006aa8 <USBD_CtlSendStatus>
      break;
 8006708:	e00c      	b.n	8006724 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f900 	bl	8006912 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <USBD_SetConfig+0x150>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fe ff92 	bl	8005642 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800671e:	2303      	movs	r3, #3
 8006720:	73fb      	strb	r3, [r7, #15]
      break;
 8006722:	bf00      	nop
  }

  return ret;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200001e0 	.word	0x200001e0

08006734 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	88db      	ldrh	r3, [r3, #6]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d004      	beq.n	8006750 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f8e2 	bl	8006912 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800674e:	e023      	b.n	8006798 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	dc02      	bgt.n	8006762 <USBD_GetConfig+0x2e>
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc03      	bgt.n	8006768 <USBD_GetConfig+0x34>
 8006760:	e015      	b.n	800678e <USBD_GetConfig+0x5a>
 8006762:	2b03      	cmp	r3, #3
 8006764:	d00b      	beq.n	800677e <USBD_GetConfig+0x4a>
 8006766:	e012      	b.n	800678e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3308      	adds	r3, #8
 8006772:	2201      	movs	r2, #1
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f93c 	bl	80069f4 <USBD_CtlSendData>
        break;
 800677c:	e00c      	b.n	8006798 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	2201      	movs	r2, #1
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f934 	bl	80069f4 <USBD_CtlSendData>
        break;
 800678c:	e004      	b.n	8006798 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f8be 	bl	8006912 <USBD_CtlError>
        break;
 8006796:	bf00      	nop
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d81e      	bhi.n	80067f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	88db      	ldrh	r3, [r3, #6]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d004      	beq.n	80067ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8a5 	bl	8006912 <USBD_CtlError>
        break;
 80067c8:	e01a      	b.n	8006800 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f043 0202 	orr.w	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	330c      	adds	r3, #12
 80067ea:	2202      	movs	r2, #2
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f900 	bl	80069f4 <USBD_CtlSendData>
      break;
 80067f4:	e004      	b.n	8006800 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f88a 	bl	8006912 <USBD_CtlError>
      break;
 80067fe:	bf00      	nop
  }
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	885b      	ldrh	r3, [r3, #2]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f940 	bl	8006aa8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006828:	e013      	b.n	8006852 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	885b      	ldrh	r3, [r3, #2]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d10b      	bne.n	800684a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	889b      	ldrh	r3, [r3, #4]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	b2da      	uxtb	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f930 	bl	8006aa8 <USBD_CtlSendStatus>
}
 8006848:	e003      	b.n	8006852 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f860 	bl	8006912 <USBD_CtlError>
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686a:	b2db      	uxtb	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	2b02      	cmp	r3, #2
 8006870:	d80b      	bhi.n	800688a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	885b      	ldrh	r3, [r3, #2]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d10c      	bne.n	8006894 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f910 	bl	8006aa8 <USBD_CtlSendStatus>
      }
      break;
 8006888:	e004      	b.n	8006894 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f840 	bl	8006912 <USBD_CtlError>
      break;
 8006892:	e000      	b.n	8006896 <USBD_ClrFeature+0x3c>
      break;
 8006894:	bf00      	nop
  }
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff fa41 	bl	8005d50 <SWAPBYTE>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff fa34 	bl	8005d50 <SWAPBYTE>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff fa27 	bl	8005d50 <SWAPBYTE>
 8006902:	4603      	mov	r3, r0
 8006904:	461a      	mov	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	80da      	strh	r2, [r3, #6]
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800691c:	2180      	movs	r1, #128	; 0x80
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fcec 	bl	80072fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006924:	2100      	movs	r1, #0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fce8 	bl	80072fc <USBD_LL_StallEP>
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d036      	beq.n	80069b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800694e:	6938      	ldr	r0, [r7, #16]
 8006950:	f000 f836 	bl	80069c0 <USBD_GetLen>
 8006954:	4603      	mov	r3, r0
 8006956:	3301      	adds	r3, #1
 8006958:	b29b      	uxth	r3, r3
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	4413      	add	r3, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	701a      	strb	r2, [r3, #0]
  idx++;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	3301      	adds	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4413      	add	r3, r2
 800697a:	2203      	movs	r2, #3
 800697c:	701a      	strb	r2, [r3, #0]
  idx++;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	3301      	adds	r3, #1
 8006982:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006984:	e013      	b.n	80069ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	4413      	add	r3, r2
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	3301      	adds	r3, #1
 8006996:	613b      	str	r3, [r7, #16]
    idx++;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	3301      	adds	r3, #1
 800699c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4413      	add	r3, r2
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	3301      	adds	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e7      	bne.n	8006986 <USBD_GetString+0x52>
 80069b6:	e000      	b.n	80069ba <USBD_GetString+0x86>
    return;
 80069b8:	bf00      	nop
  }
}
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069d0:	e005      	b.n	80069de <USBD_GetLen+0x1e>
  {
    len++;
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	3301      	adds	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	3301      	adds	r3, #1
 80069dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f5      	bne.n	80069d2 <USBD_GetLen+0x12>
  }

  return len;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fcf7 	bl	800740e <USBD_LL_Transmit>

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fce6 	bl	800740e <USBD_LL_Transmit>

  return USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	2100      	movs	r1, #0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fcea 	bl	8007450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fcd9 	bl	8007450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fca5 	bl	800740e <USBD_LL_Transmit>

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2205      	movs	r2, #5
 8006ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fcb3 	bl	8007450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006af8:	2200      	movs	r2, #0
 8006afa:	4912      	ldr	r1, [pc, #72]	; (8006b44 <MX_USB_DEVICE_Init+0x50>)
 8006afc:	4812      	ldr	r0, [pc, #72]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006afe:	f7fe fd07 	bl	8005510 <USBD_Init>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b08:	f7fa f8fe 	bl	8000d08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b0c:	490f      	ldr	r1, [pc, #60]	; (8006b4c <MX_USB_DEVICE_Init+0x58>)
 8006b0e:	480e      	ldr	r0, [pc, #56]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006b10:	f7fe fd2e 	bl	8005570 <USBD_RegisterClass>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b1a:	f7fa f8f5 	bl	8000d08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b1e:	490c      	ldr	r1, [pc, #48]	; (8006b50 <MX_USB_DEVICE_Init+0x5c>)
 8006b20:	4809      	ldr	r0, [pc, #36]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006b22:	f7fe fc1f 	bl	8005364 <USBD_CDC_RegisterInterface>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b2c:	f7fa f8ec 	bl	8000d08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b30:	4805      	ldr	r0, [pc, #20]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006b32:	f7fe fd53 	bl	80055dc <USBD_Start>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b3c:	f7fa f8e4 	bl	8000d08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200000ac 	.word	0x200000ac
 8006b48:	200001e4 	.word	0x200001e4
 8006b4c:	20000018 	.word	0x20000018
 8006b50:	20000098 	.word	0x20000098

08006b54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4905      	ldr	r1, [pc, #20]	; (8006b70 <CDC_Init_FS+0x1c>)
 8006b5c:	4805      	ldr	r0, [pc, #20]	; (8006b74 <CDC_Init_FS+0x20>)
 8006b5e:	f7fe fc1b 	bl	8005398 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b62:	4905      	ldr	r1, [pc, #20]	; (8006b78 <CDC_Init_FS+0x24>)
 8006b64:	4803      	ldr	r0, [pc, #12]	; (8006b74 <CDC_Init_FS+0x20>)
 8006b66:	f7fe fc39 	bl	80053dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200008a8 	.word	0x200008a8
 8006b74:	200001e4 	.word	0x200001e4
 8006b78:	200004c0 	.word	0x200004c0

08006b7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	6039      	str	r1, [r7, #0]
 8006b96:	71fb      	strb	r3, [r7, #7]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	2b23      	cmp	r3, #35	; 0x23
 8006ba0:	d84a      	bhi.n	8006c38 <CDC_Control_FS+0xac>
 8006ba2:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <CDC_Control_FS+0x1c>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006c39 	.word	0x08006c39
 8006bac:	08006c39 	.word	0x08006c39
 8006bb0:	08006c39 	.word	0x08006c39
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006c39 	.word	0x08006c39
 8006bbc:	08006c39 	.word	0x08006c39
 8006bc0:	08006c39 	.word	0x08006c39
 8006bc4:	08006c39 	.word	0x08006c39
 8006bc8:	08006c39 	.word	0x08006c39
 8006bcc:	08006c39 	.word	0x08006c39
 8006bd0:	08006c39 	.word	0x08006c39
 8006bd4:	08006c39 	.word	0x08006c39
 8006bd8:	08006c39 	.word	0x08006c39
 8006bdc:	08006c39 	.word	0x08006c39
 8006be0:	08006c39 	.word	0x08006c39
 8006be4:	08006c39 	.word	0x08006c39
 8006be8:	08006c39 	.word	0x08006c39
 8006bec:	08006c39 	.word	0x08006c39
 8006bf0:	08006c39 	.word	0x08006c39
 8006bf4:	08006c39 	.word	0x08006c39
 8006bf8:	08006c39 	.word	0x08006c39
 8006bfc:	08006c39 	.word	0x08006c39
 8006c00:	08006c39 	.word	0x08006c39
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c39 	.word	0x08006c39
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c39 	.word	0x08006c39
 8006c30:	08006c39 	.word	0x08006c39
 8006c34:	08006c39 	.word	0x08006c39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c38:	bf00      	nop
  }

  return (USBD_OK);
 8006c3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	480f      	ldr	r0, [pc, #60]	; (8006c94 <CDC_Receive_FS+0x4c>)
 8006c56:	f7fe fbc1 	bl	80053dc <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c5a:	480e      	ldr	r0, [pc, #56]	; (8006c94 <CDC_Receive_FS+0x4c>)
 8006c5c:	f7fe fc22 	bl	80054a4 <USBD_CDC_ReceivePacket>

    memset (buffer, '\0', 64);  // clear the buffer
 8006c60:	2240      	movs	r2, #64	; 0x40
 8006c62:	2100      	movs	r1, #0
 8006c64:	480c      	ldr	r0, [pc, #48]	; (8006c98 <CDC_Receive_FS+0x50>)
 8006c66:	f000 fca3 	bl	80075b0 <memset>
    uint8_t len = (uint8_t)*Len;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	73fb      	strb	r3, [r7, #15]
    memcpy(buffer, Buf, len);  // copy the data to the buffer
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4808      	ldr	r0, [pc, #32]	; (8006c98 <CDC_Receive_FS+0x50>)
 8006c78:	f000 fc8c 	bl	8007594 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fc94 	bl	80075b0 <memset>

    return (USBD_OK);
 8006c88:	2300      	movs	r3, #0




  /* USER CODE END 6 */
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200001e4 	.word	0x200001e4
 8006c98:	2000017c 	.word	0x2000017c

08006c9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006cac:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <CDC_Transmit_FS+0x48>)
 8006cae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e00b      	b.n	8006cda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006cc2:	887b      	ldrh	r3, [r7, #2]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	4806      	ldr	r0, [pc, #24]	; (8006ce4 <CDC_Transmit_FS+0x48>)
 8006cca:	f7fe fb65 	bl	8005398 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006cce:	4805      	ldr	r0, [pc, #20]	; (8006ce4 <CDC_Transmit_FS+0x48>)
 8006cd0:	f7fe fba2 	bl	8005418 <USBD_CDC_TransmitPacket>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200001e4 	.word	0x200001e4

08006ce8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2212      	movs	r2, #18
 8006d1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d1e:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	200000c8 	.word	0x200000c8

08006d30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d42:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	200000dc 	.word	0x200000dc

08006d54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4907      	ldr	r1, [pc, #28]	; (8006d88 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d6a:	4808      	ldr	r0, [pc, #32]	; (8006d8c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d6c:	f7ff fde2 	bl	8006934 <USBD_GetString>
 8006d70:	e004      	b.n	8006d7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4904      	ldr	r1, [pc, #16]	; (8006d88 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d76:	4805      	ldr	r0, [pc, #20]	; (8006d8c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d78:	f7ff fddc 	bl	8006934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000c90 	.word	0x20000c90
 8006d8c:	08007f68 	.word	0x08007f68

08006d90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	4904      	ldr	r1, [pc, #16]	; (8006db0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006da0:	4804      	ldr	r0, [pc, #16]	; (8006db4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006da2:	f7ff fdc7 	bl	8006934 <USBD_GetString>
  return USBD_StrDesc;
 8006da6:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000c90 	.word	0x20000c90
 8006db4:	08007f80 	.word	0x08007f80

08006db8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	221a      	movs	r2, #26
 8006dc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dca:	f000 f843 	bl	8006e54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dce:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	200000e0 	.word	0x200000e0

08006ddc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	4907      	ldr	r1, [pc, #28]	; (8006e10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006df2:	4808      	ldr	r0, [pc, #32]	; (8006e14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006df4:	f7ff fd9e 	bl	8006934 <USBD_GetString>
 8006df8:	e004      	b.n	8006e04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4904      	ldr	r1, [pc, #16]	; (8006e10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dfe:	4805      	ldr	r0, [pc, #20]	; (8006e14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e00:	f7ff fd98 	bl	8006934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000c90 	.word	0x20000c90
 8006e14:	08007f94 	.word	0x08007f94

08006e18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6039      	str	r1, [r7, #0]
 8006e22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d105      	bne.n	8006e36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4907      	ldr	r1, [pc, #28]	; (8006e4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e2e:	4808      	ldr	r0, [pc, #32]	; (8006e50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e30:	f7ff fd80 	bl	8006934 <USBD_GetString>
 8006e34:	e004      	b.n	8006e40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4904      	ldr	r1, [pc, #16]	; (8006e4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e3a:	4805      	ldr	r0, [pc, #20]	; (8006e50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e3c:	f7ff fd7a 	bl	8006934 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000c90 	.word	0x20000c90
 8006e50:	08007fa0 	.word	0x08007fa0

08006e54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <Get_SerialNum+0x44>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <Get_SerialNum+0x48>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e66:	4b0e      	ldr	r3, [pc, #56]	; (8006ea0 <Get_SerialNum+0x4c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	4909      	ldr	r1, [pc, #36]	; (8006ea4 <Get_SerialNum+0x50>)
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f814 	bl	8006eac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e84:	2204      	movs	r2, #4
 8006e86:	4908      	ldr	r1, [pc, #32]	; (8006ea8 <Get_SerialNum+0x54>)
 8006e88:	68b8      	ldr	r0, [r7, #8]
 8006e8a:	f000 f80f 	bl	8006eac <IntToUnicode>
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	1fff7a10 	.word	0x1fff7a10
 8006e9c:	1fff7a14 	.word	0x1fff7a14
 8006ea0:	1fff7a18 	.word	0x1fff7a18
 8006ea4:	200000e2 	.word	0x200000e2
 8006ea8:	200000f2 	.word	0x200000f2

08006eac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	75fb      	strb	r3, [r7, #23]
 8006ec2:	e027      	b.n	8006f14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	0f1b      	lsrs	r3, r3, #28
 8006ec8:	2b09      	cmp	r3, #9
 8006eca:	d80b      	bhi.n	8006ee4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	0f1b      	lsrs	r3, r3, #28
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	440b      	add	r3, r1
 8006edc:	3230      	adds	r2, #48	; 0x30
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	e00a      	b.n	8006efa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	0f1b      	lsrs	r3, r3, #28
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3237      	adds	r2, #55	; 0x37
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	3301      	adds	r3, #1
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	3301      	adds	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
 8006f14:	7dfa      	ldrb	r2, [r7, #23]
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d3d3      	bcc.n	8006ec4 <IntToUnicode+0x18>
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	; 0x28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f4c:	d13a      	bne.n	8006fc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f5e:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f70:	2302      	movs	r3, #2
 8006f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f7c:	230a      	movs	r3, #10
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f80:	f107 0314 	add.w	r3, r7, #20
 8006f84:	4619      	mov	r1, r3
 8006f86:	4812      	ldr	r0, [pc, #72]	; (8006fd0 <HAL_PCD_MspInit+0xa4>)
 8006f88:	f7fa f93a 	bl	8001200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f90:	4a0e      	ldr	r2, [pc, #56]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f96:	6353      	str	r3, [r2, #52]	; 0x34
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <HAL_PCD_MspInit+0xa0>)
 8006faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	2043      	movs	r0, #67	; 0x43
 8006fba:	f7fa f8ea 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fbe:	2043      	movs	r0, #67	; 0x43
 8006fc0:	f7fa f903 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3728      	adds	r7, #40	; 0x28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40020000 	.word	0x40020000

08006fd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f7fe fb43 	bl	8005676 <USBD_LL_SetupStage>
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	4619      	mov	r1, r3
 8007022:	f7fe fb7d 	bl	8005720 <USBD_LL_DataOutStage>
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	334c      	adds	r3, #76	; 0x4c
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	4619      	mov	r1, r3
 8007056:	f7fe fc16 	bl	8005886 <USBD_LL_DataInStage>
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fd4a 	bl	8005b0a <USBD_LL_SOF>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007086:	2301      	movs	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d001      	beq.n	8007096 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007092:	f7f9 fe39 	bl	8000d08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800709c:	7bfa      	ldrb	r2, [r7, #15]
 800709e:	4611      	mov	r1, r2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe fcf4 	bl	8005a8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fc9c 	bl	80059ea <USBD_LL_Reset>
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fcef 	bl	8005aae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <HAL_PCD_SuspendCallback+0x48>)
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	4a03      	ldr	r2, [pc, #12]	; (8007104 <HAL_PCD_SuspendCallback+0x48>)
 80070f6:	f043 0306 	orr.w	r3, r3, #6
 80070fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	e000ed00 	.word	0xe000ed00

08007108 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe fcdf 	bl	8005ada <USBD_LL_Resume>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	4611      	mov	r1, r2
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fd37 	bl	8005bae <USBD_LL_IsoOUTIncomplete>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe fcf3 	bl	8005b4a <USBD_LL_IsoINIncomplete>
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fd49 	bl	8005c12 <USBD_LL_DevConnected>
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fd46 	bl	8005c28 <USBD_LL_DevDisconnected>
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d13c      	bne.n	800722e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071b4:	4a20      	ldr	r2, [pc, #128]	; (8007238 <USBD_LL_Init+0x94>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a1e      	ldr	r2, [pc, #120]	; (8007238 <USBD_LL_Init+0x94>)
 80071c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071c4:	4b1c      	ldr	r3, [pc, #112]	; (8007238 <USBD_LL_Init+0x94>)
 80071c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071cc:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <USBD_LL_Init+0x94>)
 80071ce:	2204      	movs	r2, #4
 80071d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071d2:	4b19      	ldr	r3, [pc, #100]	; (8007238 <USBD_LL_Init+0x94>)
 80071d4:	2202      	movs	r2, #2
 80071d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071d8:	4b17      	ldr	r3, [pc, #92]	; (8007238 <USBD_LL_Init+0x94>)
 80071da:	2200      	movs	r2, #0
 80071dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071de:	4b16      	ldr	r3, [pc, #88]	; (8007238 <USBD_LL_Init+0x94>)
 80071e0:	2202      	movs	r2, #2
 80071e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071e4:	4b14      	ldr	r3, [pc, #80]	; (8007238 <USBD_LL_Init+0x94>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071ea:	4b13      	ldr	r3, [pc, #76]	; (8007238 <USBD_LL_Init+0x94>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071f0:	4b11      	ldr	r3, [pc, #68]	; (8007238 <USBD_LL_Init+0x94>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80071f6:	4b10      	ldr	r3, [pc, #64]	; (8007238 <USBD_LL_Init+0x94>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071fc:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <USBD_LL_Init+0x94>)
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007202:	480d      	ldr	r0, [pc, #52]	; (8007238 <USBD_LL_Init+0x94>)
 8007204:	f7fa f9b3 	bl	800156e <HAL_PCD_Init>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800720e:	f7f9 fd7b 	bl	8000d08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007212:	2180      	movs	r1, #128	; 0x80
 8007214:	4808      	ldr	r0, [pc, #32]	; (8007238 <USBD_LL_Init+0x94>)
 8007216:	f7fb fc0a 	bl	8002a2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800721a:	2240      	movs	r2, #64	; 0x40
 800721c:	2100      	movs	r1, #0
 800721e:	4806      	ldr	r0, [pc, #24]	; (8007238 <USBD_LL_Init+0x94>)
 8007220:	f7fb fbbe 	bl	80029a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007224:	2280      	movs	r2, #128	; 0x80
 8007226:	2101      	movs	r1, #1
 8007228:	4803      	ldr	r0, [pc, #12]	; (8007238 <USBD_LL_Init+0x94>)
 800722a:	f7fb fbb9 	bl	80029a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000e90 	.word	0x20000e90

0800723c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007252:	4618      	mov	r0, r3
 8007254:	f7fa faa8 	bl	80017a8 <HAL_PCD_Start>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f942 	bl	80074e8 <USBD_Get_USB_Status>
 8007264:	4603      	mov	r3, r0
 8007266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007268:	7bbb      	ldrb	r3, [r7, #14]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	461a      	mov	r2, r3
 8007280:	4603      	mov	r3, r0
 8007282:	70fb      	strb	r3, [r7, #3]
 8007284:	460b      	mov	r3, r1
 8007286:	70bb      	strb	r3, [r7, #2]
 8007288:	4613      	mov	r3, r2
 800728a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800729a:	78bb      	ldrb	r3, [r7, #2]
 800729c:	883a      	ldrh	r2, [r7, #0]
 800729e:	78f9      	ldrb	r1, [r7, #3]
 80072a0:	f7fa ff79 	bl	8002196 <HAL_PCD_EP_Open>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 f91c 	bl	80074e8 <USBD_Get_USB_Status>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	460b      	mov	r3, r1
 80072c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fa ffc2 	bl	8002266 <HAL_PCD_EP_Close>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f8fd 	bl	80074e8 <USBD_Get_USB_Status>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007316:	78fa      	ldrb	r2, [r7, #3]
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7fb f89a 	bl	8002454 <HAL_PCD_EP_SetStall>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 f8de 	bl	80074e8 <USBD_Get_USB_Status>
 800732c:	4603      	mov	r3, r0
 800732e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007330:	7bbb      	ldrb	r3, [r7, #14]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f7fb f8df 	bl	800251c <HAL_PCD_EP_ClrStall>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f8bf 	bl	80074e8 <USBD_Get_USB_Status>
 800736a:	4603      	mov	r3, r0
 800736c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800736e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800738a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800738c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007390:	2b00      	cmp	r3, #0
 8007392:	da0b      	bge.n	80073ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	333e      	adds	r3, #62	; 0x3e
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	e00b      	b.n	80073c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	4613      	mov	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80073c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	4611      	mov	r1, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fa feac 	bl	800214c <HAL_PCD_SetAddress>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 f874 	bl	80074e8 <USBD_Get_USB_Status>
 8007400:	4603      	mov	r3, r0
 8007402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007404:	7bbb      	ldrb	r3, [r7, #14]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b086      	sub	sp, #24
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	460b      	mov	r3, r1
 800741c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800742c:	7af9      	ldrb	r1, [r7, #11]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	f7fa ffc5 	bl	80023c0 <HAL_PCD_EP_Transmit>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	4618      	mov	r0, r3
 800743e:	f000 f853 	bl	80074e8 <USBD_Get_USB_Status>
 8007442:	4603      	mov	r3, r0
 8007444:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007446:	7dbb      	ldrb	r3, [r7, #22]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	460b      	mov	r3, r1
 800745e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800746e:	7af9      	ldrb	r1, [r7, #11]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	f7fa ff41 	bl	80022fa <HAL_PCD_EP_Receive>
 8007478:	4603      	mov	r3, r0
 800747a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 f832 	bl	80074e8 <USBD_Get_USB_Status>
 8007484:	4603      	mov	r3, r0
 8007486:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007488:	7dbb      	ldrb	r3, [r7, #22]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fa ff71 	bl	8002390 <HAL_PCD_EP_GetRxCount>
 80074ae:	4603      	mov	r3, r0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074c0:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <USBD_static_malloc+0x18>)
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	2000139c 	.word	0x2000139c

080074d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d817      	bhi.n	800752c <USBD_Get_USB_Status+0x44>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USBD_Get_USB_Status+0x1c>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	08007515 	.word	0x08007515
 8007508:	0800751b 	.word	0x0800751b
 800750c:	08007521 	.word	0x08007521
 8007510:	08007527 	.word	0x08007527
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
    break;
 8007518:	e00b      	b.n	8007532 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800751a:	2303      	movs	r3, #3
 800751c:	73fb      	strb	r3, [r7, #15]
    break;
 800751e:	e008      	b.n	8007532 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007520:	2301      	movs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
    break;
 8007524:	e005      	b.n	8007532 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007526:	2303      	movs	r3, #3
 8007528:	73fb      	strb	r3, [r7, #15]
    break;
 800752a:	e002      	b.n	8007532 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	73fb      	strb	r3, [r7, #15]
    break;
 8007530:	bf00      	nop
  }
  return usb_status;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <__errno>:
 8007540:	4b01      	ldr	r3, [pc, #4]	; (8007548 <__errno+0x8>)
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	200000fc 	.word	0x200000fc

0800754c <__libc_init_array>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	4d0d      	ldr	r5, [pc, #52]	; (8007584 <__libc_init_array+0x38>)
 8007550:	4c0d      	ldr	r4, [pc, #52]	; (8007588 <__libc_init_array+0x3c>)
 8007552:	1b64      	subs	r4, r4, r5
 8007554:	10a4      	asrs	r4, r4, #2
 8007556:	2600      	movs	r6, #0
 8007558:	42a6      	cmp	r6, r4
 800755a:	d109      	bne.n	8007570 <__libc_init_array+0x24>
 800755c:	4d0b      	ldr	r5, [pc, #44]	; (800758c <__libc_init_array+0x40>)
 800755e:	4c0c      	ldr	r4, [pc, #48]	; (8007590 <__libc_init_array+0x44>)
 8007560:	f000 fca2 	bl	8007ea8 <_init>
 8007564:	1b64      	subs	r4, r4, r5
 8007566:	10a4      	asrs	r4, r4, #2
 8007568:	2600      	movs	r6, #0
 800756a:	42a6      	cmp	r6, r4
 800756c:	d105      	bne.n	800757a <__libc_init_array+0x2e>
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	f855 3b04 	ldr.w	r3, [r5], #4
 8007574:	4798      	blx	r3
 8007576:	3601      	adds	r6, #1
 8007578:	e7ee      	b.n	8007558 <__libc_init_array+0xc>
 800757a:	f855 3b04 	ldr.w	r3, [r5], #4
 800757e:	4798      	blx	r3
 8007580:	3601      	adds	r6, #1
 8007582:	e7f2      	b.n	800756a <__libc_init_array+0x1e>
 8007584:	08007ffc 	.word	0x08007ffc
 8007588:	08007ffc 	.word	0x08007ffc
 800758c:	08007ffc 	.word	0x08007ffc
 8007590:	08008000 	.word	0x08008000

08007594 <memcpy>:
 8007594:	440a      	add	r2, r1
 8007596:	4291      	cmp	r1, r2
 8007598:	f100 33ff 	add.w	r3, r0, #4294967295
 800759c:	d100      	bne.n	80075a0 <memcpy+0xc>
 800759e:	4770      	bx	lr
 80075a0:	b510      	push	{r4, lr}
 80075a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075aa:	4291      	cmp	r1, r2
 80075ac:	d1f9      	bne.n	80075a2 <memcpy+0xe>
 80075ae:	bd10      	pop	{r4, pc}

080075b0 <memset>:
 80075b0:	4402      	add	r2, r0
 80075b2:	4603      	mov	r3, r0
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d100      	bne.n	80075ba <memset+0xa>
 80075b8:	4770      	bx	lr
 80075ba:	f803 1b01 	strb.w	r1, [r3], #1
 80075be:	e7f9      	b.n	80075b4 <memset+0x4>

080075c0 <sniprintf>:
 80075c0:	b40c      	push	{r2, r3}
 80075c2:	b530      	push	{r4, r5, lr}
 80075c4:	4b17      	ldr	r3, [pc, #92]	; (8007624 <sniprintf+0x64>)
 80075c6:	1e0c      	subs	r4, r1, #0
 80075c8:	681d      	ldr	r5, [r3, #0]
 80075ca:	b09d      	sub	sp, #116	; 0x74
 80075cc:	da08      	bge.n	80075e0 <sniprintf+0x20>
 80075ce:	238b      	movs	r3, #139	; 0x8b
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	f04f 30ff 	mov.w	r0, #4294967295
 80075d6:	b01d      	add	sp, #116	; 0x74
 80075d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075dc:	b002      	add	sp, #8
 80075de:	4770      	bx	lr
 80075e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80075e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075e8:	bf14      	ite	ne
 80075ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075ee:	4623      	moveq	r3, r4
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	9307      	str	r3, [sp, #28]
 80075f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075f8:	9002      	str	r0, [sp, #8]
 80075fa:	9006      	str	r0, [sp, #24]
 80075fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007602:	ab21      	add	r3, sp, #132	; 0x84
 8007604:	a902      	add	r1, sp, #8
 8007606:	4628      	mov	r0, r5
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	f000 f869 	bl	80076e0 <_svfiprintf_r>
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	bfbc      	itt	lt
 8007612:	238b      	movlt	r3, #139	; 0x8b
 8007614:	602b      	strlt	r3, [r5, #0]
 8007616:	2c00      	cmp	r4, #0
 8007618:	d0dd      	beq.n	80075d6 <sniprintf+0x16>
 800761a:	9b02      	ldr	r3, [sp, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	e7d9      	b.n	80075d6 <sniprintf+0x16>
 8007622:	bf00      	nop
 8007624:	200000fc 	.word	0x200000fc

08007628 <__ssputs_r>:
 8007628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	688e      	ldr	r6, [r1, #8]
 800762e:	429e      	cmp	r6, r3
 8007630:	4682      	mov	sl, r0
 8007632:	460c      	mov	r4, r1
 8007634:	4690      	mov	r8, r2
 8007636:	461f      	mov	r7, r3
 8007638:	d838      	bhi.n	80076ac <__ssputs_r+0x84>
 800763a:	898a      	ldrh	r2, [r1, #12]
 800763c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007640:	d032      	beq.n	80076a8 <__ssputs_r+0x80>
 8007642:	6825      	ldr	r5, [r4, #0]
 8007644:	6909      	ldr	r1, [r1, #16]
 8007646:	eba5 0901 	sub.w	r9, r5, r1
 800764a:	6965      	ldr	r5, [r4, #20]
 800764c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007654:	3301      	adds	r3, #1
 8007656:	444b      	add	r3, r9
 8007658:	106d      	asrs	r5, r5, #1
 800765a:	429d      	cmp	r5, r3
 800765c:	bf38      	it	cc
 800765e:	461d      	movcc	r5, r3
 8007660:	0553      	lsls	r3, r2, #21
 8007662:	d531      	bpl.n	80076c8 <__ssputs_r+0xa0>
 8007664:	4629      	mov	r1, r5
 8007666:	f000 fb55 	bl	8007d14 <_malloc_r>
 800766a:	4606      	mov	r6, r0
 800766c:	b950      	cbnz	r0, 8007684 <__ssputs_r+0x5c>
 800766e:	230c      	movs	r3, #12
 8007670:	f8ca 3000 	str.w	r3, [sl]
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007684:	6921      	ldr	r1, [r4, #16]
 8007686:	464a      	mov	r2, r9
 8007688:	f7ff ff84 	bl	8007594 <memcpy>
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	6126      	str	r6, [r4, #16]
 800769a:	6165      	str	r5, [r4, #20]
 800769c:	444e      	add	r6, r9
 800769e:	eba5 0509 	sub.w	r5, r5, r9
 80076a2:	6026      	str	r6, [r4, #0]
 80076a4:	60a5      	str	r5, [r4, #8]
 80076a6:	463e      	mov	r6, r7
 80076a8:	42be      	cmp	r6, r7
 80076aa:	d900      	bls.n	80076ae <__ssputs_r+0x86>
 80076ac:	463e      	mov	r6, r7
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	4632      	mov	r2, r6
 80076b2:	4641      	mov	r1, r8
 80076b4:	f000 faa8 	bl	8007c08 <memmove>
 80076b8:	68a3      	ldr	r3, [r4, #8]
 80076ba:	1b9b      	subs	r3, r3, r6
 80076bc:	60a3      	str	r3, [r4, #8]
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	4433      	add	r3, r6
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	2000      	movs	r0, #0
 80076c6:	e7db      	b.n	8007680 <__ssputs_r+0x58>
 80076c8:	462a      	mov	r2, r5
 80076ca:	f000 fb97 	bl	8007dfc <_realloc_r>
 80076ce:	4606      	mov	r6, r0
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d1e1      	bne.n	8007698 <__ssputs_r+0x70>
 80076d4:	6921      	ldr	r1, [r4, #16]
 80076d6:	4650      	mov	r0, sl
 80076d8:	f000 fab0 	bl	8007c3c <_free_r>
 80076dc:	e7c7      	b.n	800766e <__ssputs_r+0x46>
	...

080076e0 <_svfiprintf_r>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	4698      	mov	r8, r3
 80076e6:	898b      	ldrh	r3, [r1, #12]
 80076e8:	061b      	lsls	r3, r3, #24
 80076ea:	b09d      	sub	sp, #116	; 0x74
 80076ec:	4607      	mov	r7, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	d50e      	bpl.n	8007712 <_svfiprintf_r+0x32>
 80076f4:	690b      	ldr	r3, [r1, #16]
 80076f6:	b963      	cbnz	r3, 8007712 <_svfiprintf_r+0x32>
 80076f8:	2140      	movs	r1, #64	; 0x40
 80076fa:	f000 fb0b 	bl	8007d14 <_malloc_r>
 80076fe:	6028      	str	r0, [r5, #0]
 8007700:	6128      	str	r0, [r5, #16]
 8007702:	b920      	cbnz	r0, 800770e <_svfiprintf_r+0x2e>
 8007704:	230c      	movs	r3, #12
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e0d1      	b.n	80078b2 <_svfiprintf_r+0x1d2>
 800770e:	2340      	movs	r3, #64	; 0x40
 8007710:	616b      	str	r3, [r5, #20]
 8007712:	2300      	movs	r3, #0
 8007714:	9309      	str	r3, [sp, #36]	; 0x24
 8007716:	2320      	movs	r3, #32
 8007718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800771c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007720:	2330      	movs	r3, #48	; 0x30
 8007722:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078cc <_svfiprintf_r+0x1ec>
 8007726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800772a:	f04f 0901 	mov.w	r9, #1
 800772e:	4623      	mov	r3, r4
 8007730:	469a      	mov	sl, r3
 8007732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007736:	b10a      	cbz	r2, 800773c <_svfiprintf_r+0x5c>
 8007738:	2a25      	cmp	r2, #37	; 0x25
 800773a:	d1f9      	bne.n	8007730 <_svfiprintf_r+0x50>
 800773c:	ebba 0b04 	subs.w	fp, sl, r4
 8007740:	d00b      	beq.n	800775a <_svfiprintf_r+0x7a>
 8007742:	465b      	mov	r3, fp
 8007744:	4622      	mov	r2, r4
 8007746:	4629      	mov	r1, r5
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff ff6d 	bl	8007628 <__ssputs_r>
 800774e:	3001      	adds	r0, #1
 8007750:	f000 80aa 	beq.w	80078a8 <_svfiprintf_r+0x1c8>
 8007754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007756:	445a      	add	r2, fp
 8007758:	9209      	str	r2, [sp, #36]	; 0x24
 800775a:	f89a 3000 	ldrb.w	r3, [sl]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 80a2 	beq.w	80078a8 <_svfiprintf_r+0x1c8>
 8007764:	2300      	movs	r3, #0
 8007766:	f04f 32ff 	mov.w	r2, #4294967295
 800776a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800776e:	f10a 0a01 	add.w	sl, sl, #1
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	9307      	str	r3, [sp, #28]
 8007776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800777a:	931a      	str	r3, [sp, #104]	; 0x68
 800777c:	4654      	mov	r4, sl
 800777e:	2205      	movs	r2, #5
 8007780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007784:	4851      	ldr	r0, [pc, #324]	; (80078cc <_svfiprintf_r+0x1ec>)
 8007786:	f7f8 fd33 	bl	80001f0 <memchr>
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	b9d8      	cbnz	r0, 80077c6 <_svfiprintf_r+0xe6>
 800778e:	06d0      	lsls	r0, r2, #27
 8007790:	bf44      	itt	mi
 8007792:	2320      	movmi	r3, #32
 8007794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007798:	0711      	lsls	r1, r2, #28
 800779a:	bf44      	itt	mi
 800779c:	232b      	movmi	r3, #43	; 0x2b
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a2:	f89a 3000 	ldrb.w	r3, [sl]
 80077a6:	2b2a      	cmp	r3, #42	; 0x2a
 80077a8:	d015      	beq.n	80077d6 <_svfiprintf_r+0xf6>
 80077aa:	9a07      	ldr	r2, [sp, #28]
 80077ac:	4654      	mov	r4, sl
 80077ae:	2000      	movs	r0, #0
 80077b0:	f04f 0c0a 	mov.w	ip, #10
 80077b4:	4621      	mov	r1, r4
 80077b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ba:	3b30      	subs	r3, #48	; 0x30
 80077bc:	2b09      	cmp	r3, #9
 80077be:	d94e      	bls.n	800785e <_svfiprintf_r+0x17e>
 80077c0:	b1b0      	cbz	r0, 80077f0 <_svfiprintf_r+0x110>
 80077c2:	9207      	str	r2, [sp, #28]
 80077c4:	e014      	b.n	80077f0 <_svfiprintf_r+0x110>
 80077c6:	eba0 0308 	sub.w	r3, r0, r8
 80077ca:	fa09 f303 	lsl.w	r3, r9, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	46a2      	mov	sl, r4
 80077d4:	e7d2      	b.n	800777c <_svfiprintf_r+0x9c>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	1d19      	adds	r1, r3, #4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	9103      	str	r1, [sp, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfbb      	ittet	lt
 80077e2:	425b      	neglt	r3, r3
 80077e4:	f042 0202 	orrlt.w	r2, r2, #2
 80077e8:	9307      	strge	r3, [sp, #28]
 80077ea:	9307      	strlt	r3, [sp, #28]
 80077ec:	bfb8      	it	lt
 80077ee:	9204      	strlt	r2, [sp, #16]
 80077f0:	7823      	ldrb	r3, [r4, #0]
 80077f2:	2b2e      	cmp	r3, #46	; 0x2e
 80077f4:	d10c      	bne.n	8007810 <_svfiprintf_r+0x130>
 80077f6:	7863      	ldrb	r3, [r4, #1]
 80077f8:	2b2a      	cmp	r3, #42	; 0x2a
 80077fa:	d135      	bne.n	8007868 <_svfiprintf_r+0x188>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	1d1a      	adds	r2, r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	9203      	str	r2, [sp, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	bfb8      	it	lt
 8007808:	f04f 33ff 	movlt.w	r3, #4294967295
 800780c:	3402      	adds	r4, #2
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078dc <_svfiprintf_r+0x1fc>
 8007814:	7821      	ldrb	r1, [r4, #0]
 8007816:	2203      	movs	r2, #3
 8007818:	4650      	mov	r0, sl
 800781a:	f7f8 fce9 	bl	80001f0 <memchr>
 800781e:	b140      	cbz	r0, 8007832 <_svfiprintf_r+0x152>
 8007820:	2340      	movs	r3, #64	; 0x40
 8007822:	eba0 000a 	sub.w	r0, r0, sl
 8007826:	fa03 f000 	lsl.w	r0, r3, r0
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	4303      	orrs	r3, r0
 800782e:	3401      	adds	r4, #1
 8007830:	9304      	str	r3, [sp, #16]
 8007832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007836:	4826      	ldr	r0, [pc, #152]	; (80078d0 <_svfiprintf_r+0x1f0>)
 8007838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800783c:	2206      	movs	r2, #6
 800783e:	f7f8 fcd7 	bl	80001f0 <memchr>
 8007842:	2800      	cmp	r0, #0
 8007844:	d038      	beq.n	80078b8 <_svfiprintf_r+0x1d8>
 8007846:	4b23      	ldr	r3, [pc, #140]	; (80078d4 <_svfiprintf_r+0x1f4>)
 8007848:	bb1b      	cbnz	r3, 8007892 <_svfiprintf_r+0x1b2>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	3307      	adds	r3, #7
 800784e:	f023 0307 	bic.w	r3, r3, #7
 8007852:	3308      	adds	r3, #8
 8007854:	9303      	str	r3, [sp, #12]
 8007856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007858:	4433      	add	r3, r6
 800785a:	9309      	str	r3, [sp, #36]	; 0x24
 800785c:	e767      	b.n	800772e <_svfiprintf_r+0x4e>
 800785e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007862:	460c      	mov	r4, r1
 8007864:	2001      	movs	r0, #1
 8007866:	e7a5      	b.n	80077b4 <_svfiprintf_r+0xd4>
 8007868:	2300      	movs	r3, #0
 800786a:	3401      	adds	r4, #1
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	4619      	mov	r1, r3
 8007870:	f04f 0c0a 	mov.w	ip, #10
 8007874:	4620      	mov	r0, r4
 8007876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787a:	3a30      	subs	r2, #48	; 0x30
 800787c:	2a09      	cmp	r2, #9
 800787e:	d903      	bls.n	8007888 <_svfiprintf_r+0x1a8>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0c5      	beq.n	8007810 <_svfiprintf_r+0x130>
 8007884:	9105      	str	r1, [sp, #20]
 8007886:	e7c3      	b.n	8007810 <_svfiprintf_r+0x130>
 8007888:	fb0c 2101 	mla	r1, ip, r1, r2
 800788c:	4604      	mov	r4, r0
 800788e:	2301      	movs	r3, #1
 8007890:	e7f0      	b.n	8007874 <_svfiprintf_r+0x194>
 8007892:	ab03      	add	r3, sp, #12
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	462a      	mov	r2, r5
 8007898:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <_svfiprintf_r+0x1f8>)
 800789a:	a904      	add	r1, sp, #16
 800789c:	4638      	mov	r0, r7
 800789e:	f3af 8000 	nop.w
 80078a2:	1c42      	adds	r2, r0, #1
 80078a4:	4606      	mov	r6, r0
 80078a6:	d1d6      	bne.n	8007856 <_svfiprintf_r+0x176>
 80078a8:	89ab      	ldrh	r3, [r5, #12]
 80078aa:	065b      	lsls	r3, r3, #25
 80078ac:	f53f af2c 	bmi.w	8007708 <_svfiprintf_r+0x28>
 80078b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b2:	b01d      	add	sp, #116	; 0x74
 80078b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b8:	ab03      	add	r3, sp, #12
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	462a      	mov	r2, r5
 80078be:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <_svfiprintf_r+0x1f8>)
 80078c0:	a904      	add	r1, sp, #16
 80078c2:	4638      	mov	r0, r7
 80078c4:	f000 f87a 	bl	80079bc <_printf_i>
 80078c8:	e7eb      	b.n	80078a2 <_svfiprintf_r+0x1c2>
 80078ca:	bf00      	nop
 80078cc:	08007fc0 	.word	0x08007fc0
 80078d0:	08007fca 	.word	0x08007fca
 80078d4:	00000000 	.word	0x00000000
 80078d8:	08007629 	.word	0x08007629
 80078dc:	08007fc6 	.word	0x08007fc6

080078e0 <_printf_common>:
 80078e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e4:	4616      	mov	r6, r2
 80078e6:	4699      	mov	r9, r3
 80078e8:	688a      	ldr	r2, [r1, #8]
 80078ea:	690b      	ldr	r3, [r1, #16]
 80078ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078f0:	4293      	cmp	r3, r2
 80078f2:	bfb8      	it	lt
 80078f4:	4613      	movlt	r3, r2
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078fc:	4607      	mov	r7, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	b10a      	cbz	r2, 8007906 <_printf_common+0x26>
 8007902:	3301      	adds	r3, #1
 8007904:	6033      	str	r3, [r6, #0]
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	0699      	lsls	r1, r3, #26
 800790a:	bf42      	ittt	mi
 800790c:	6833      	ldrmi	r3, [r6, #0]
 800790e:	3302      	addmi	r3, #2
 8007910:	6033      	strmi	r3, [r6, #0]
 8007912:	6825      	ldr	r5, [r4, #0]
 8007914:	f015 0506 	ands.w	r5, r5, #6
 8007918:	d106      	bne.n	8007928 <_printf_common+0x48>
 800791a:	f104 0a19 	add.w	sl, r4, #25
 800791e:	68e3      	ldr	r3, [r4, #12]
 8007920:	6832      	ldr	r2, [r6, #0]
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	42ab      	cmp	r3, r5
 8007926:	dc26      	bgt.n	8007976 <_printf_common+0x96>
 8007928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800792c:	1e13      	subs	r3, r2, #0
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	bf18      	it	ne
 8007932:	2301      	movne	r3, #1
 8007934:	0692      	lsls	r2, r2, #26
 8007936:	d42b      	bmi.n	8007990 <_printf_common+0xb0>
 8007938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800793c:	4649      	mov	r1, r9
 800793e:	4638      	mov	r0, r7
 8007940:	47c0      	blx	r8
 8007942:	3001      	adds	r0, #1
 8007944:	d01e      	beq.n	8007984 <_printf_common+0xa4>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	68e5      	ldr	r5, [r4, #12]
 800794a:	6832      	ldr	r2, [r6, #0]
 800794c:	f003 0306 	and.w	r3, r3, #6
 8007950:	2b04      	cmp	r3, #4
 8007952:	bf08      	it	eq
 8007954:	1aad      	subeq	r5, r5, r2
 8007956:	68a3      	ldr	r3, [r4, #8]
 8007958:	6922      	ldr	r2, [r4, #16]
 800795a:	bf0c      	ite	eq
 800795c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007960:	2500      	movne	r5, #0
 8007962:	4293      	cmp	r3, r2
 8007964:	bfc4      	itt	gt
 8007966:	1a9b      	subgt	r3, r3, r2
 8007968:	18ed      	addgt	r5, r5, r3
 800796a:	2600      	movs	r6, #0
 800796c:	341a      	adds	r4, #26
 800796e:	42b5      	cmp	r5, r6
 8007970:	d11a      	bne.n	80079a8 <_printf_common+0xc8>
 8007972:	2000      	movs	r0, #0
 8007974:	e008      	b.n	8007988 <_printf_common+0xa8>
 8007976:	2301      	movs	r3, #1
 8007978:	4652      	mov	r2, sl
 800797a:	4649      	mov	r1, r9
 800797c:	4638      	mov	r0, r7
 800797e:	47c0      	blx	r8
 8007980:	3001      	adds	r0, #1
 8007982:	d103      	bne.n	800798c <_printf_common+0xac>
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798c:	3501      	adds	r5, #1
 800798e:	e7c6      	b.n	800791e <_printf_common+0x3e>
 8007990:	18e1      	adds	r1, r4, r3
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	2030      	movs	r0, #48	; 0x30
 8007996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800799a:	4422      	add	r2, r4
 800799c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a4:	3302      	adds	r3, #2
 80079a6:	e7c7      	b.n	8007938 <_printf_common+0x58>
 80079a8:	2301      	movs	r3, #1
 80079aa:	4622      	mov	r2, r4
 80079ac:	4649      	mov	r1, r9
 80079ae:	4638      	mov	r0, r7
 80079b0:	47c0      	blx	r8
 80079b2:	3001      	adds	r0, #1
 80079b4:	d0e6      	beq.n	8007984 <_printf_common+0xa4>
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7d9      	b.n	800796e <_printf_common+0x8e>
	...

080079bc <_printf_i>:
 80079bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c0:	7e0f      	ldrb	r7, [r1, #24]
 80079c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079c4:	2f78      	cmp	r7, #120	; 0x78
 80079c6:	4691      	mov	r9, r2
 80079c8:	4680      	mov	r8, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	469a      	mov	sl, r3
 80079ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079d2:	d807      	bhi.n	80079e4 <_printf_i+0x28>
 80079d4:	2f62      	cmp	r7, #98	; 0x62
 80079d6:	d80a      	bhi.n	80079ee <_printf_i+0x32>
 80079d8:	2f00      	cmp	r7, #0
 80079da:	f000 80d8 	beq.w	8007b8e <_printf_i+0x1d2>
 80079de:	2f58      	cmp	r7, #88	; 0x58
 80079e0:	f000 80a3 	beq.w	8007b2a <_printf_i+0x16e>
 80079e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079ec:	e03a      	b.n	8007a64 <_printf_i+0xa8>
 80079ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079f2:	2b15      	cmp	r3, #21
 80079f4:	d8f6      	bhi.n	80079e4 <_printf_i+0x28>
 80079f6:	a101      	add	r1, pc, #4	; (adr r1, 80079fc <_printf_i+0x40>)
 80079f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079fc:	08007a55 	.word	0x08007a55
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	080079e5 	.word	0x080079e5
 8007a08:	080079e5 	.word	0x080079e5
 8007a0c:	080079e5 	.word	0x080079e5
 8007a10:	080079e5 	.word	0x080079e5
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	080079e5 	.word	0x080079e5
 8007a1c:	080079e5 	.word	0x080079e5
 8007a20:	080079e5 	.word	0x080079e5
 8007a24:	080079e5 	.word	0x080079e5
 8007a28:	08007b75 	.word	0x08007b75
 8007a2c:	08007a99 	.word	0x08007a99
 8007a30:	08007b57 	.word	0x08007b57
 8007a34:	080079e5 	.word	0x080079e5
 8007a38:	080079e5 	.word	0x080079e5
 8007a3c:	08007b97 	.word	0x08007b97
 8007a40:	080079e5 	.word	0x080079e5
 8007a44:	08007a99 	.word	0x08007a99
 8007a48:	080079e5 	.word	0x080079e5
 8007a4c:	080079e5 	.word	0x080079e5
 8007a50:	08007b5f 	.word	0x08007b5f
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	1d1a      	adds	r2, r3, #4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	602a      	str	r2, [r5, #0]
 8007a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a64:	2301      	movs	r3, #1
 8007a66:	e0a3      	b.n	8007bb0 <_printf_i+0x1f4>
 8007a68:	6820      	ldr	r0, [r4, #0]
 8007a6a:	6829      	ldr	r1, [r5, #0]
 8007a6c:	0606      	lsls	r6, r0, #24
 8007a6e:	f101 0304 	add.w	r3, r1, #4
 8007a72:	d50a      	bpl.n	8007a8a <_printf_i+0xce>
 8007a74:	680e      	ldr	r6, [r1, #0]
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	da03      	bge.n	8007a84 <_printf_i+0xc8>
 8007a7c:	232d      	movs	r3, #45	; 0x2d
 8007a7e:	4276      	negs	r6, r6
 8007a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a84:	485e      	ldr	r0, [pc, #376]	; (8007c00 <_printf_i+0x244>)
 8007a86:	230a      	movs	r3, #10
 8007a88:	e019      	b.n	8007abe <_printf_i+0x102>
 8007a8a:	680e      	ldr	r6, [r1, #0]
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a92:	bf18      	it	ne
 8007a94:	b236      	sxthne	r6, r6
 8007a96:	e7ef      	b.n	8007a78 <_printf_i+0xbc>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	1d19      	adds	r1, r3, #4
 8007a9e:	6029      	str	r1, [r5, #0]
 8007aa0:	0601      	lsls	r1, r0, #24
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_i+0xec>
 8007aa4:	681e      	ldr	r6, [r3, #0]
 8007aa6:	e002      	b.n	8007aae <_printf_i+0xf2>
 8007aa8:	0646      	lsls	r6, r0, #25
 8007aaa:	d5fb      	bpl.n	8007aa4 <_printf_i+0xe8>
 8007aac:	881e      	ldrh	r6, [r3, #0]
 8007aae:	4854      	ldr	r0, [pc, #336]	; (8007c00 <_printf_i+0x244>)
 8007ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2308      	moveq	r3, #8
 8007ab6:	230a      	movne	r3, #10
 8007ab8:	2100      	movs	r1, #0
 8007aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007abe:	6865      	ldr	r5, [r4, #4]
 8007ac0:	60a5      	str	r5, [r4, #8]
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	bfa2      	ittt	ge
 8007ac6:	6821      	ldrge	r1, [r4, #0]
 8007ac8:	f021 0104 	bicge.w	r1, r1, #4
 8007acc:	6021      	strge	r1, [r4, #0]
 8007ace:	b90e      	cbnz	r6, 8007ad4 <_printf_i+0x118>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	d04d      	beq.n	8007b70 <_printf_i+0x1b4>
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ada:	fb03 6711 	mls	r7, r3, r1, r6
 8007ade:	5dc7      	ldrb	r7, [r0, r7]
 8007ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ae4:	4637      	mov	r7, r6
 8007ae6:	42bb      	cmp	r3, r7
 8007ae8:	460e      	mov	r6, r1
 8007aea:	d9f4      	bls.n	8007ad6 <_printf_i+0x11a>
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d10b      	bne.n	8007b08 <_printf_i+0x14c>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	07de      	lsls	r6, r3, #31
 8007af4:	d508      	bpl.n	8007b08 <_printf_i+0x14c>
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6861      	ldr	r1, [r4, #4]
 8007afa:	4299      	cmp	r1, r3
 8007afc:	bfde      	ittt	le
 8007afe:	2330      	movle	r3, #48	; 0x30
 8007b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b08:	1b52      	subs	r2, r2, r5
 8007b0a:	6122      	str	r2, [r4, #16]
 8007b0c:	f8cd a000 	str.w	sl, [sp]
 8007b10:	464b      	mov	r3, r9
 8007b12:	aa03      	add	r2, sp, #12
 8007b14:	4621      	mov	r1, r4
 8007b16:	4640      	mov	r0, r8
 8007b18:	f7ff fee2 	bl	80078e0 <_printf_common>
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	d14c      	bne.n	8007bba <_printf_i+0x1fe>
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	b004      	add	sp, #16
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	4835      	ldr	r0, [pc, #212]	; (8007c00 <_printf_i+0x244>)
 8007b2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b30:	6829      	ldr	r1, [r5, #0]
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b38:	6029      	str	r1, [r5, #0]
 8007b3a:	061d      	lsls	r5, r3, #24
 8007b3c:	d514      	bpl.n	8007b68 <_printf_i+0x1ac>
 8007b3e:	07df      	lsls	r7, r3, #31
 8007b40:	bf44      	itt	mi
 8007b42:	f043 0320 	orrmi.w	r3, r3, #32
 8007b46:	6023      	strmi	r3, [r4, #0]
 8007b48:	b91e      	cbnz	r6, 8007b52 <_printf_i+0x196>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f023 0320 	bic.w	r3, r3, #32
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	2310      	movs	r3, #16
 8007b54:	e7b0      	b.n	8007ab8 <_printf_i+0xfc>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	f043 0320 	orr.w	r3, r3, #32
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	2378      	movs	r3, #120	; 0x78
 8007b60:	4828      	ldr	r0, [pc, #160]	; (8007c04 <_printf_i+0x248>)
 8007b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b66:	e7e3      	b.n	8007b30 <_printf_i+0x174>
 8007b68:	0659      	lsls	r1, r3, #25
 8007b6a:	bf48      	it	mi
 8007b6c:	b2b6      	uxthmi	r6, r6
 8007b6e:	e7e6      	b.n	8007b3e <_printf_i+0x182>
 8007b70:	4615      	mov	r5, r2
 8007b72:	e7bb      	b.n	8007aec <_printf_i+0x130>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	6826      	ldr	r6, [r4, #0]
 8007b78:	6961      	ldr	r1, [r4, #20]
 8007b7a:	1d18      	adds	r0, r3, #4
 8007b7c:	6028      	str	r0, [r5, #0]
 8007b7e:	0635      	lsls	r5, r6, #24
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	d501      	bpl.n	8007b88 <_printf_i+0x1cc>
 8007b84:	6019      	str	r1, [r3, #0]
 8007b86:	e002      	b.n	8007b8e <_printf_i+0x1d2>
 8007b88:	0670      	lsls	r0, r6, #25
 8007b8a:	d5fb      	bpl.n	8007b84 <_printf_i+0x1c8>
 8007b8c:	8019      	strh	r1, [r3, #0]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	4615      	mov	r5, r2
 8007b94:	e7ba      	b.n	8007b0c <_printf_i+0x150>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	602a      	str	r2, [r5, #0]
 8007b9c:	681d      	ldr	r5, [r3, #0]
 8007b9e:	6862      	ldr	r2, [r4, #4]
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7f8 fb24 	bl	80001f0 <memchr>
 8007ba8:	b108      	cbz	r0, 8007bae <_printf_i+0x1f2>
 8007baa:	1b40      	subs	r0, r0, r5
 8007bac:	6060      	str	r0, [r4, #4]
 8007bae:	6863      	ldr	r3, [r4, #4]
 8007bb0:	6123      	str	r3, [r4, #16]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb8:	e7a8      	b.n	8007b0c <_printf_i+0x150>
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	47d0      	blx	sl
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d0ab      	beq.n	8007b20 <_printf_i+0x164>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	079b      	lsls	r3, r3, #30
 8007bcc:	d413      	bmi.n	8007bf6 <_printf_i+0x23a>
 8007bce:	68e0      	ldr	r0, [r4, #12]
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	4298      	cmp	r0, r3
 8007bd4:	bfb8      	it	lt
 8007bd6:	4618      	movlt	r0, r3
 8007bd8:	e7a4      	b.n	8007b24 <_printf_i+0x168>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4649      	mov	r1, r9
 8007be0:	4640      	mov	r0, r8
 8007be2:	47d0      	blx	sl
 8007be4:	3001      	adds	r0, #1
 8007be6:	d09b      	beq.n	8007b20 <_printf_i+0x164>
 8007be8:	3501      	adds	r5, #1
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	9903      	ldr	r1, [sp, #12]
 8007bee:	1a5b      	subs	r3, r3, r1
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dcf2      	bgt.n	8007bda <_printf_i+0x21e>
 8007bf4:	e7eb      	b.n	8007bce <_printf_i+0x212>
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	f104 0619 	add.w	r6, r4, #25
 8007bfc:	e7f5      	b.n	8007bea <_printf_i+0x22e>
 8007bfe:	bf00      	nop
 8007c00:	08007fd1 	.word	0x08007fd1
 8007c04:	08007fe2 	.word	0x08007fe2

08007c08 <memmove>:
 8007c08:	4288      	cmp	r0, r1
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	eb01 0402 	add.w	r4, r1, r2
 8007c10:	d902      	bls.n	8007c18 <memmove+0x10>
 8007c12:	4284      	cmp	r4, r0
 8007c14:	4623      	mov	r3, r4
 8007c16:	d807      	bhi.n	8007c28 <memmove+0x20>
 8007c18:	1e43      	subs	r3, r0, #1
 8007c1a:	42a1      	cmp	r1, r4
 8007c1c:	d008      	beq.n	8007c30 <memmove+0x28>
 8007c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c26:	e7f8      	b.n	8007c1a <memmove+0x12>
 8007c28:	4402      	add	r2, r0
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	428a      	cmp	r2, r1
 8007c2e:	d100      	bne.n	8007c32 <memmove+0x2a>
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c3a:	e7f7      	b.n	8007c2c <memmove+0x24>

08007c3c <_free_r>:
 8007c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c3e:	2900      	cmp	r1, #0
 8007c40:	d044      	beq.n	8007ccc <_free_r+0x90>
 8007c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c46:	9001      	str	r0, [sp, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c4e:	bfb8      	it	lt
 8007c50:	18e4      	addlt	r4, r4, r3
 8007c52:	f000 f913 	bl	8007e7c <__malloc_lock>
 8007c56:	4a1e      	ldr	r2, [pc, #120]	; (8007cd0 <_free_r+0x94>)
 8007c58:	9801      	ldr	r0, [sp, #4]
 8007c5a:	6813      	ldr	r3, [r2, #0]
 8007c5c:	b933      	cbnz	r3, 8007c6c <_free_r+0x30>
 8007c5e:	6063      	str	r3, [r4, #4]
 8007c60:	6014      	str	r4, [r2, #0]
 8007c62:	b003      	add	sp, #12
 8007c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c68:	f000 b90e 	b.w	8007e88 <__malloc_unlock>
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d908      	bls.n	8007c82 <_free_r+0x46>
 8007c70:	6825      	ldr	r5, [r4, #0]
 8007c72:	1961      	adds	r1, r4, r5
 8007c74:	428b      	cmp	r3, r1
 8007c76:	bf01      	itttt	eq
 8007c78:	6819      	ldreq	r1, [r3, #0]
 8007c7a:	685b      	ldreq	r3, [r3, #4]
 8007c7c:	1949      	addeq	r1, r1, r5
 8007c7e:	6021      	streq	r1, [r4, #0]
 8007c80:	e7ed      	b.n	8007c5e <_free_r+0x22>
 8007c82:	461a      	mov	r2, r3
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	b10b      	cbz	r3, 8007c8c <_free_r+0x50>
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d9fa      	bls.n	8007c82 <_free_r+0x46>
 8007c8c:	6811      	ldr	r1, [r2, #0]
 8007c8e:	1855      	adds	r5, r2, r1
 8007c90:	42a5      	cmp	r5, r4
 8007c92:	d10b      	bne.n	8007cac <_free_r+0x70>
 8007c94:	6824      	ldr	r4, [r4, #0]
 8007c96:	4421      	add	r1, r4
 8007c98:	1854      	adds	r4, r2, r1
 8007c9a:	42a3      	cmp	r3, r4
 8007c9c:	6011      	str	r1, [r2, #0]
 8007c9e:	d1e0      	bne.n	8007c62 <_free_r+0x26>
 8007ca0:	681c      	ldr	r4, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	6053      	str	r3, [r2, #4]
 8007ca6:	4421      	add	r1, r4
 8007ca8:	6011      	str	r1, [r2, #0]
 8007caa:	e7da      	b.n	8007c62 <_free_r+0x26>
 8007cac:	d902      	bls.n	8007cb4 <_free_r+0x78>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	6003      	str	r3, [r0, #0]
 8007cb2:	e7d6      	b.n	8007c62 <_free_r+0x26>
 8007cb4:	6825      	ldr	r5, [r4, #0]
 8007cb6:	1961      	adds	r1, r4, r5
 8007cb8:	428b      	cmp	r3, r1
 8007cba:	bf04      	itt	eq
 8007cbc:	6819      	ldreq	r1, [r3, #0]
 8007cbe:	685b      	ldreq	r3, [r3, #4]
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	bf04      	itt	eq
 8007cc4:	1949      	addeq	r1, r1, r5
 8007cc6:	6021      	streq	r1, [r4, #0]
 8007cc8:	6054      	str	r4, [r2, #4]
 8007cca:	e7ca      	b.n	8007c62 <_free_r+0x26>
 8007ccc:	b003      	add	sp, #12
 8007cce:	bd30      	pop	{r4, r5, pc}
 8007cd0:	200015bc 	.word	0x200015bc

08007cd4 <sbrk_aligned>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	4e0e      	ldr	r6, [pc, #56]	; (8007d10 <sbrk_aligned+0x3c>)
 8007cd8:	460c      	mov	r4, r1
 8007cda:	6831      	ldr	r1, [r6, #0]
 8007cdc:	4605      	mov	r5, r0
 8007cde:	b911      	cbnz	r1, 8007ce6 <sbrk_aligned+0x12>
 8007ce0:	f000 f8bc 	bl	8007e5c <_sbrk_r>
 8007ce4:	6030      	str	r0, [r6, #0]
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 f8b7 	bl	8007e5c <_sbrk_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d00a      	beq.n	8007d08 <sbrk_aligned+0x34>
 8007cf2:	1cc4      	adds	r4, r0, #3
 8007cf4:	f024 0403 	bic.w	r4, r4, #3
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	d007      	beq.n	8007d0c <sbrk_aligned+0x38>
 8007cfc:	1a21      	subs	r1, r4, r0
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 f8ac 	bl	8007e5c <_sbrk_r>
 8007d04:	3001      	adds	r0, #1
 8007d06:	d101      	bne.n	8007d0c <sbrk_aligned+0x38>
 8007d08:	f04f 34ff 	mov.w	r4, #4294967295
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	200015c0 	.word	0x200015c0

08007d14 <_malloc_r>:
 8007d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d18:	1ccd      	adds	r5, r1, #3
 8007d1a:	f025 0503 	bic.w	r5, r5, #3
 8007d1e:	3508      	adds	r5, #8
 8007d20:	2d0c      	cmp	r5, #12
 8007d22:	bf38      	it	cc
 8007d24:	250c      	movcc	r5, #12
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	4607      	mov	r7, r0
 8007d2a:	db01      	blt.n	8007d30 <_malloc_r+0x1c>
 8007d2c:	42a9      	cmp	r1, r5
 8007d2e:	d905      	bls.n	8007d3c <_malloc_r+0x28>
 8007d30:	230c      	movs	r3, #12
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	2600      	movs	r6, #0
 8007d36:	4630      	mov	r0, r6
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	4e2e      	ldr	r6, [pc, #184]	; (8007df8 <_malloc_r+0xe4>)
 8007d3e:	f000 f89d 	bl	8007e7c <__malloc_lock>
 8007d42:	6833      	ldr	r3, [r6, #0]
 8007d44:	461c      	mov	r4, r3
 8007d46:	bb34      	cbnz	r4, 8007d96 <_malloc_r+0x82>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f7ff ffc2 	bl	8007cd4 <sbrk_aligned>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	4604      	mov	r4, r0
 8007d54:	d14d      	bne.n	8007df2 <_malloc_r+0xde>
 8007d56:	6834      	ldr	r4, [r6, #0]
 8007d58:	4626      	mov	r6, r4
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	d140      	bne.n	8007de0 <_malloc_r+0xcc>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	4631      	mov	r1, r6
 8007d62:	4638      	mov	r0, r7
 8007d64:	eb04 0803 	add.w	r8, r4, r3
 8007d68:	f000 f878 	bl	8007e5c <_sbrk_r>
 8007d6c:	4580      	cmp	r8, r0
 8007d6e:	d13a      	bne.n	8007de6 <_malloc_r+0xd2>
 8007d70:	6821      	ldr	r1, [r4, #0]
 8007d72:	3503      	adds	r5, #3
 8007d74:	1a6d      	subs	r5, r5, r1
 8007d76:	f025 0503 	bic.w	r5, r5, #3
 8007d7a:	3508      	adds	r5, #8
 8007d7c:	2d0c      	cmp	r5, #12
 8007d7e:	bf38      	it	cc
 8007d80:	250c      	movcc	r5, #12
 8007d82:	4629      	mov	r1, r5
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7ff ffa5 	bl	8007cd4 <sbrk_aligned>
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d02b      	beq.n	8007de6 <_malloc_r+0xd2>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	442b      	add	r3, r5
 8007d92:	6023      	str	r3, [r4, #0]
 8007d94:	e00e      	b.n	8007db4 <_malloc_r+0xa0>
 8007d96:	6822      	ldr	r2, [r4, #0]
 8007d98:	1b52      	subs	r2, r2, r5
 8007d9a:	d41e      	bmi.n	8007dda <_malloc_r+0xc6>
 8007d9c:	2a0b      	cmp	r2, #11
 8007d9e:	d916      	bls.n	8007dce <_malloc_r+0xba>
 8007da0:	1961      	adds	r1, r4, r5
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	6025      	str	r5, [r4, #0]
 8007da6:	bf18      	it	ne
 8007da8:	6059      	strne	r1, [r3, #4]
 8007daa:	6863      	ldr	r3, [r4, #4]
 8007dac:	bf08      	it	eq
 8007dae:	6031      	streq	r1, [r6, #0]
 8007db0:	5162      	str	r2, [r4, r5]
 8007db2:	604b      	str	r3, [r1, #4]
 8007db4:	4638      	mov	r0, r7
 8007db6:	f104 060b 	add.w	r6, r4, #11
 8007dba:	f000 f865 	bl	8007e88 <__malloc_unlock>
 8007dbe:	f026 0607 	bic.w	r6, r6, #7
 8007dc2:	1d23      	adds	r3, r4, #4
 8007dc4:	1af2      	subs	r2, r6, r3
 8007dc6:	d0b6      	beq.n	8007d36 <_malloc_r+0x22>
 8007dc8:	1b9b      	subs	r3, r3, r6
 8007dca:	50a3      	str	r3, [r4, r2]
 8007dcc:	e7b3      	b.n	8007d36 <_malloc_r+0x22>
 8007dce:	6862      	ldr	r2, [r4, #4]
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	bf0c      	ite	eq
 8007dd4:	6032      	streq	r2, [r6, #0]
 8007dd6:	605a      	strne	r2, [r3, #4]
 8007dd8:	e7ec      	b.n	8007db4 <_malloc_r+0xa0>
 8007dda:	4623      	mov	r3, r4
 8007ddc:	6864      	ldr	r4, [r4, #4]
 8007dde:	e7b2      	b.n	8007d46 <_malloc_r+0x32>
 8007de0:	4634      	mov	r4, r6
 8007de2:	6876      	ldr	r6, [r6, #4]
 8007de4:	e7b9      	b.n	8007d5a <_malloc_r+0x46>
 8007de6:	230c      	movs	r3, #12
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	4638      	mov	r0, r7
 8007dec:	f000 f84c 	bl	8007e88 <__malloc_unlock>
 8007df0:	e7a1      	b.n	8007d36 <_malloc_r+0x22>
 8007df2:	6025      	str	r5, [r4, #0]
 8007df4:	e7de      	b.n	8007db4 <_malloc_r+0xa0>
 8007df6:	bf00      	nop
 8007df8:	200015bc 	.word	0x200015bc

08007dfc <_realloc_r>:
 8007dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e00:	4680      	mov	r8, r0
 8007e02:	4614      	mov	r4, r2
 8007e04:	460e      	mov	r6, r1
 8007e06:	b921      	cbnz	r1, 8007e12 <_realloc_r+0x16>
 8007e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	f7ff bf81 	b.w	8007d14 <_malloc_r>
 8007e12:	b92a      	cbnz	r2, 8007e20 <_realloc_r+0x24>
 8007e14:	f7ff ff12 	bl	8007c3c <_free_r>
 8007e18:	4625      	mov	r5, r4
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e20:	f000 f838 	bl	8007e94 <_malloc_usable_size_r>
 8007e24:	4284      	cmp	r4, r0
 8007e26:	4607      	mov	r7, r0
 8007e28:	d802      	bhi.n	8007e30 <_realloc_r+0x34>
 8007e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e2e:	d812      	bhi.n	8007e56 <_realloc_r+0x5a>
 8007e30:	4621      	mov	r1, r4
 8007e32:	4640      	mov	r0, r8
 8007e34:	f7ff ff6e 	bl	8007d14 <_malloc_r>
 8007e38:	4605      	mov	r5, r0
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d0ed      	beq.n	8007e1a <_realloc_r+0x1e>
 8007e3e:	42bc      	cmp	r4, r7
 8007e40:	4622      	mov	r2, r4
 8007e42:	4631      	mov	r1, r6
 8007e44:	bf28      	it	cs
 8007e46:	463a      	movcs	r2, r7
 8007e48:	f7ff fba4 	bl	8007594 <memcpy>
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4640      	mov	r0, r8
 8007e50:	f7ff fef4 	bl	8007c3c <_free_r>
 8007e54:	e7e1      	b.n	8007e1a <_realloc_r+0x1e>
 8007e56:	4635      	mov	r5, r6
 8007e58:	e7df      	b.n	8007e1a <_realloc_r+0x1e>
	...

08007e5c <_sbrk_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d06      	ldr	r5, [pc, #24]	; (8007e78 <_sbrk_r+0x1c>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	f7f8 ffb0 	bl	8000dcc <_sbrk>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_sbrk_r+0x1a>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_sbrk_r+0x1a>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	200015c4 	.word	0x200015c4

08007e7c <__malloc_lock>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	; (8007e84 <__malloc_lock+0x8>)
 8007e7e:	f000 b811 	b.w	8007ea4 <__retarget_lock_acquire_recursive>
 8007e82:	bf00      	nop
 8007e84:	200015c8 	.word	0x200015c8

08007e88 <__malloc_unlock>:
 8007e88:	4801      	ldr	r0, [pc, #4]	; (8007e90 <__malloc_unlock+0x8>)
 8007e8a:	f000 b80c 	b.w	8007ea6 <__retarget_lock_release_recursive>
 8007e8e:	bf00      	nop
 8007e90:	200015c8 	.word	0x200015c8

08007e94 <_malloc_usable_size_r>:
 8007e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e98:	1f18      	subs	r0, r3, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfbc      	itt	lt
 8007e9e:	580b      	ldrlt	r3, [r1, r0]
 8007ea0:	18c0      	addlt	r0, r0, r3
 8007ea2:	4770      	bx	lr

08007ea4 <__retarget_lock_acquire_recursive>:
 8007ea4:	4770      	bx	lr

08007ea6 <__retarget_lock_release_recursive>:
 8007ea6:	4770      	bx	lr

08007ea8 <_init>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	bf00      	nop
 8007eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eae:	bc08      	pop	{r3}
 8007eb0:	469e      	mov	lr, r3
 8007eb2:	4770      	bx	lr

08007eb4 <_fini>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	bf00      	nop
 8007eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eba:	bc08      	pop	{r3}
 8007ebc:	469e      	mov	lr, r3
 8007ebe:	4770      	bx	lr
